<?php
/**
 * TransactionEventDto
 *
 * PHP version 8.1
 *
 * @package  Shaype\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification Webhooks
 *
 * Definition of the webhooks API for client callbacks
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Webhook\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Webhook\ObjectSerializer;

/**
 * TransactionEventDto Class Doc Comment
 *
 * @description Details of the **Transaction** event; provided when the type is &#x60;TRANSACTION&#x60;.
 * @package  Shaype\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class TransactionEventDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'TransactionEventDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'transaction_hay_id' => 'string',
        'hold_hay_id' => 'string',
        'account_hay_id' => 'string',
        'currency_amount' => '\Shaype\Webhook\Model\CurrencyAmount',
        'updated_balance' => '\Shaype\Webhook\Model\CurrencyAmount',
        'is_pending' => 'bool',
        'counterpart_name' => 'string',
        'outcome' => 'string',
        'transaction_time_utc' => '\DateTime',
        'card_preference_outcome' => 'string',
        'card_processor_response' => 'string',
        'merchant_name' => 'string',
        'is_atm_transaction' => 'bool',
        'transaction_type' => 'string',
        'card_usage_details' => '\Shaype\Webhook\Model\CardUsageDetails',
        'account_balances' => '\Shaype\Webhook\Model\AccountBalancesDto',
        'card_hay_id' => 'string',
        'customer_hay_id' => 'string',
        'rule_details' => '\Shaype\Webhook\Model\RuleDetails',
        'counterpart_details' => '\Shaype\Webhook\Model\CounterpartDetails',
        'origin_id' => 'string',
        'origin_type' => 'string',
        'category' => 'string',
        'merchant_id' => 'string',
        'description' => 'string',
        'mandate_payment_details' => '\Shaype\Webhook\Model\MandatePaymentDetails',
        'return_reason' => '\Shaype\Webhook\Model\ReturnReason'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'transaction_hay_id' => 'uuid',
        'hold_hay_id' => 'uuid',
        'account_hay_id' => 'uuid',
        'currency_amount' => null,
        'updated_balance' => null,
        'is_pending' => null,
        'counterpart_name' => null,
        'outcome' => null,
        'transaction_time_utc' => 'date-time',
        'card_preference_outcome' => null,
        'card_processor_response' => null,
        'merchant_name' => null,
        'is_atm_transaction' => null,
        'transaction_type' => null,
        'card_usage_details' => null,
        'account_balances' => null,
        'card_hay_id' => 'uuid',
        'customer_hay_id' => 'uuid',
        'rule_details' => null,
        'counterpart_details' => null,
        'origin_id' => 'uuid',
        'origin_type' => null,
        'category' => null,
        'merchant_id' => null,
        'description' => null,
        'mandate_payment_details' => null,
        'return_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'transaction_hay_id' => false,
        'hold_hay_id' => false,
        'account_hay_id' => false,
        'currency_amount' => false,
        'updated_balance' => false,
        'is_pending' => false,
        'counterpart_name' => false,
        'outcome' => false,
        'transaction_time_utc' => false,
        'card_preference_outcome' => false,
        'card_processor_response' => false,
        'merchant_name' => false,
        'is_atm_transaction' => false,
        'transaction_type' => false,
        'card_usage_details' => false,
        'account_balances' => false,
        'card_hay_id' => false,
        'customer_hay_id' => false,
        'rule_details' => false,
        'counterpart_details' => false,
        'origin_id' => false,
        'origin_type' => false,
        'category' => false,
        'merchant_id' => false,
        'description' => false,
        'mandate_payment_details' => false,
        'return_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'transaction_hay_id' => 'transactionHayId',
        'hold_hay_id' => 'holdHayId',
        'account_hay_id' => 'accountHayId',
        'currency_amount' => 'currencyAmount',
        'updated_balance' => 'updatedBalance',
        'is_pending' => 'isPending',
        'counterpart_name' => 'counterpartName',
        'outcome' => 'outcome',
        'transaction_time_utc' => 'transactionTimeUtc',
        'card_preference_outcome' => 'cardPreferenceOutcome',
        'card_processor_response' => 'cardProcessorResponse',
        'merchant_name' => 'merchantName',
        'is_atm_transaction' => 'isAtmTransaction',
        'transaction_type' => 'transactionType',
        'card_usage_details' => 'cardUsageDetails',
        'account_balances' => 'accountBalances',
        'card_hay_id' => 'cardHayId',
        'customer_hay_id' => 'customerHayId',
        'rule_details' => 'ruleDetails',
        'counterpart_details' => 'counterpartDetails',
        'origin_id' => 'originId',
        'origin_type' => 'originType',
        'category' => 'category',
        'merchant_id' => 'merchantId',
        'description' => 'description',
        'mandate_payment_details' => 'mandatePaymentDetails',
        'return_reason' => 'returnReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'transaction_hay_id' => 'setTransactionHayId',
        'hold_hay_id' => 'setHoldHayId',
        'account_hay_id' => 'setAccountHayId',
        'currency_amount' => 'setCurrencyAmount',
        'updated_balance' => 'setUpdatedBalance',
        'is_pending' => 'setIsPending',
        'counterpart_name' => 'setCounterpartName',
        'outcome' => 'setOutcome',
        'transaction_time_utc' => 'setTransactionTimeUtc',
        'card_preference_outcome' => 'setCardPreferenceOutcome',
        'card_processor_response' => 'setCardProcessorResponse',
        'merchant_name' => 'setMerchantName',
        'is_atm_transaction' => 'setIsAtmTransaction',
        'transaction_type' => 'setTransactionType',
        'card_usage_details' => 'setCardUsageDetails',
        'account_balances' => 'setAccountBalances',
        'card_hay_id' => 'setCardHayId',
        'customer_hay_id' => 'setCustomerHayId',
        'rule_details' => 'setRuleDetails',
        'counterpart_details' => 'setCounterpartDetails',
        'origin_id' => 'setOriginId',
        'origin_type' => 'setOriginType',
        'category' => 'setCategory',
        'merchant_id' => 'setMerchantId',
        'description' => 'setDescription',
        'mandate_payment_details' => 'setMandatePaymentDetails',
        'return_reason' => 'setReturnReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'transaction_hay_id' => 'getTransactionHayId',
        'hold_hay_id' => 'getHoldHayId',
        'account_hay_id' => 'getAccountHayId',
        'currency_amount' => 'getCurrencyAmount',
        'updated_balance' => 'getUpdatedBalance',
        'is_pending' => 'getIsPending',
        'counterpart_name' => 'getCounterpartName',
        'outcome' => 'getOutcome',
        'transaction_time_utc' => 'getTransactionTimeUtc',
        'card_preference_outcome' => 'getCardPreferenceOutcome',
        'card_processor_response' => 'getCardProcessorResponse',
        'merchant_name' => 'getMerchantName',
        'is_atm_transaction' => 'getIsAtmTransaction',
        'transaction_type' => 'getTransactionType',
        'card_usage_details' => 'getCardUsageDetails',
        'account_balances' => 'getAccountBalances',
        'card_hay_id' => 'getCardHayId',
        'customer_hay_id' => 'getCustomerHayId',
        'rule_details' => 'getRuleDetails',
        'counterpart_details' => 'getCounterpartDetails',
        'origin_id' => 'getOriginId',
        'origin_type' => 'getOriginType',
        'category' => 'getCategory',
        'merchant_id' => 'getMerchantId',
        'description' => 'getDescription',
        'mandate_payment_details' => 'getMandatePaymentDetails',
        'return_reason' => 'getReturnReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const OUTCOME_ACCEPTED = 'ACCEPTED';
    public const OUTCOME_REFUSED_CARD_PREFERENCE = 'REFUSED_CARD_PREFERENCE';
    public const OUTCOME_REFUSED_ACCOUNT_PREFERENCE = 'REFUSED_ACCOUNT_PREFERENCE';
    public const OUTCOME_REFUSED_FRAUD = 'REFUSED_FRAUD';
    public const OUTCOME_REFUSED_AML = 'REFUSED_AML';
    public const OUTCOME_REFUSED_MAX_BALANCE_EXCEEDED = 'REFUSED_MAX_BALANCE_EXCEEDED';
    public const OUTCOME_REFUSED_NOT_ENOUGH_FUNDS = 'REFUSED_NOT_ENOUGH_FUNDS';
    public const OUTCOME_REFUSED_DAILY_LIMIT_EXCEEDED = 'REFUSED_DAILY_LIMIT_EXCEEDED';
    public const OUTCOME_INTERNAL_ERROR = 'INTERNAL_ERROR';
    public const OUTCOME_REFUSED_ACCOUNT_NOT_FOUND_FOR_CARD_TOKEN = 'REFUSED_ACCOUNT_NOT_FOUND_FOR_CARD_TOKEN';
    public const OUTCOME_REFUSED_UNDETERMINED_BALANCE_FOR_ACCOUNT = 'REFUSED_UNDETERMINED_BALANCE_FOR_ACCOUNT';
    public const OUTCOME_REFUSED_ACCOUNT_NOT_FOUND_FOR_CURRENCY = 'REFUSED_ACCOUNT_NOT_FOUND_FOR_CURRENCY';
    public const OUTCOME_REFUSED_UNDETERMINED_SPENDING_FOR_ACCOUNT = 'REFUSED_UNDETERMINED_SPENDING_FOR_ACCOUNT';
    public const OUTCOME_REFUSED_UNDETERMINED_TOP_UPS_FOR_ACCOUNT = 'REFUSED_UNDETERMINED_TOP_UPS_FOR_ACCOUNT';
    public const OUTCOME_REFUSED_UNDETERMINED_ATM_WITHDRAWALS_FOR_ACCOUNT = 'REFUSED_UNDETERMINED_ATM_WITHDRAWALS_FOR_ACCOUNT';
    public const OUTCOME_REFUSED_ANNUAL_SPENDING_LIMIT_BREACHED = 'REFUSED_ANNUAL_SPENDING_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_DAILY_ATM_WITHDRAWAL_LIMIT_BREACHED = 'REFUSED_DAILY_ATM_WITHDRAWAL_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_DAILY_TOP_UP_LIMIT_BREACHED = 'REFUSED_DAILY_TOP_UP_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_ACCOUNT_BLOCKED = 'REFUSED_ACCOUNT_BLOCKED';
    public const OUTCOME_REFUSED_ACCOUNT_CLOSED = 'REFUSED_ACCOUNT_CLOSED';
    public const OUTCOME_REFUSED_RECIPIENT_ACCOUNT_BLOCKED = 'REFUSED_RECIPIENT_ACCOUNT_BLOCKED';
    public const OUTCOME_REFUSED_RECIPIENT_ACCOUNT_CLOSED = 'REFUSED_RECIPIENT_ACCOUNT_CLOSED';
    public const OUTCOME_REFUSED_DAILY_DIRECT_DEBIT_LIMIT_BREACHED = 'REFUSED_DAILY_DIRECT_DEBIT_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED = 'REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_RULES = 'REFUSED_RULES';
    public const OUTCOME_REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED = 'REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED = 'REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED = 'REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED = 'REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_BPAY_INVALID_BILLER_CODE = 'REFUSED_BPAY_INVALID_BILLER_CODE';
    public const OUTCOME_REFUSED_BPAY_INVALID_REFERENCE = 'REFUSED_BPAY_INVALID_REFERENCE';
    public const OUTCOME_REFUSED_BPAY_INVALID_PAYMENT = 'REFUSED_BPAY_INVALID_PAYMENT';
    public const OUTCOME_REFUSED_BPAY_REJECTED = 'REFUSED_BPAY_REJECTED';
    public const OUTCOME_REFUSED_DAILY_CARD_TRANSACTIONS_LIMIT_BREACHED = 'REFUSED_DAILY_CARD_TRANSACTIONS_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_SINGLE_CARD_TRANSACTION_LIMIT_BREACHED = 'REFUSED_SINGLE_CARD_TRANSACTION_LIMIT_BREACHED';
    public const OUTCOME_REFUSED_SANCTIONS = 'REFUSED_SANCTIONS';
    public const OUTCOME_REFUSED_UNABLE_TO_VALIDATE = 'REFUSED_UNABLE_TO_VALIDATE';
    public const OUTCOME_REFUSED_INSUFFICIENT_DATA = 'REFUSED_INSUFFICIENT_DATA';
    public const CARD_PREFERENCE_OUTCOME_CARD_FROZEN = 'CARD_FROZEN';
    public const CARD_PREFERENCE_OUTCOME_CARD_NOT_PRESENT_DISABLED = 'CARD_NOT_PRESENT_DISABLED';
    public const CARD_PREFERENCE_OUTCOME_CASH_WITHDRAWAL_DISABLED = 'CASH_WITHDRAWAL_DISABLED';
    public const CARD_PREFERENCE_OUTCOME_CONTACTLESS_DISABLED = 'CONTACTLESS_DISABLED';
    public const CARD_PREFERENCE_OUTCOME_OVERSEAS_SPENDING_DISABLED = 'OVERSEAS_SPENDING_DISABLED';
    public const CARD_PREFERENCE_OUTCOME_MAGNETIC_STRIPE_PAYMENT_DISABLED = 'MAGNETIC_STRIPE_PAYMENT_DISABLED';
    public const CARD_PREFERENCE_OUTCOME_MOBILE_WALLET_PAYMENT_DISABLED = 'MOBILE_WALLET_PAYMENT_DISABLED';
    public const CARD_PREFERENCE_OUTCOME_OK = 'OK';
    public const CARD_PREFERENCE_OUTCOME_CARD_BLOCKED = 'CARD_BLOCKED';
    public const CARD_PROCESSOR_RESPONSE_INCORRECT_PIN = 'INCORRECT_PIN';
    public const CARD_PROCESSOR_RESPONSE_REFUSED_CARD_BLOCKED = 'REFUSED_CARD_BLOCKED';
    public const CARD_PROCESSOR_RESPONSE_RESTRICTED_CARD = 'RESTRICTED_CARD';
    public const TRANSACTION_TYPE_CARD_TRANSACTION = 'CARD_TRANSACTION';
    public const TRANSACTION_TYPE_CARD_TRANSACTION_REFUND = 'CARD_TRANSACTION_REFUND';
    public const TRANSACTION_TYPE_CARD_TRANSACTION_SETTLED = 'CARD_TRANSACTION_SETTLED';
    public const TRANSACTION_TYPE_INTRABANK_TRANSFER_IN = 'INTRABANK_TRANSFER_IN';
    public const TRANSACTION_TYPE_INTRABANK_TRANSFER_OUT = 'INTRABANK_TRANSFER_OUT';
    public const TRANSACTION_TYPE_INTERBANK_TRANSFER_IN = 'INTERBANK_TRANSFER_IN';
    public const TRANSACTION_TYPE_INTERBANK_TRANSFER_OUT = 'INTERBANK_TRANSFER_OUT';
    public const TRANSACTION_TYPE_DIRECT_DEBIT_TRANSFER = 'DIRECT_DEBIT_TRANSFER';
    public const TRANSACTION_TYPE_HAY_TOP_UP = 'HAY_TOP_UP';
    public const TRANSACTION_TYPE_INTERBANK_TRANSFER_OUT_REVERSAL = 'INTERBANK_TRANSFER_OUT_REVERSAL';
    public const TRANSACTION_TYPE_REWARD = 'REWARD';
    public const TRANSACTION_TYPE_GENERAL_CREDIT = 'GENERAL_CREDIT';
    public const TRANSACTION_TYPE_GENERAL_DEBIT = 'GENERAL_DEBIT';
    public const TRANSACTION_TYPE_ORIGINAL_CREDIT = 'ORIGINAL_CREDIT';
    public const TRANSACTION_TYPE_BPAY_TRANSFER_OUT = 'BPAY_TRANSFER_OUT';
    public const ORIGIN_TYPE_CUSTOMER = 'CUSTOMER';
    public const ORIGIN_TYPE_SCHEDULED_PAYMENT = 'SCHEDULED_PAYMENT';
    public const ORIGIN_TYPE_HAAS_OPERATIONS = 'HAAS_OPERATIONS';
    public const ORIGIN_TYPE_OPERATIONS = 'OPERATIONS';
    public const ORIGIN_TYPE_MANDATE_PAYMENT = 'MANDATE_PAYMENT';
    public const ORIGIN_TYPE_DIRECT_DEBIT = 'DIRECT_DEBIT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutcomeAllowableValues()
    {
        return [
            self::OUTCOME_ACCEPTED,
            self::OUTCOME_REFUSED_CARD_PREFERENCE,
            self::OUTCOME_REFUSED_ACCOUNT_PREFERENCE,
            self::OUTCOME_REFUSED_FRAUD,
            self::OUTCOME_REFUSED_AML,
            self::OUTCOME_REFUSED_MAX_BALANCE_EXCEEDED,
            self::OUTCOME_REFUSED_NOT_ENOUGH_FUNDS,
            self::OUTCOME_REFUSED_DAILY_LIMIT_EXCEEDED,
            self::OUTCOME_INTERNAL_ERROR,
            self::OUTCOME_REFUSED_ACCOUNT_NOT_FOUND_FOR_CARD_TOKEN,
            self::OUTCOME_REFUSED_UNDETERMINED_BALANCE_FOR_ACCOUNT,
            self::OUTCOME_REFUSED_ACCOUNT_NOT_FOUND_FOR_CURRENCY,
            self::OUTCOME_REFUSED_UNDETERMINED_SPENDING_FOR_ACCOUNT,
            self::OUTCOME_REFUSED_UNDETERMINED_TOP_UPS_FOR_ACCOUNT,
            self::OUTCOME_REFUSED_UNDETERMINED_ATM_WITHDRAWALS_FOR_ACCOUNT,
            self::OUTCOME_REFUSED_ANNUAL_SPENDING_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_DAILY_ATM_WITHDRAWAL_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_DAILY_TOP_UP_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_ACCOUNT_BLOCKED,
            self::OUTCOME_REFUSED_ACCOUNT_CLOSED,
            self::OUTCOME_REFUSED_RECIPIENT_ACCOUNT_BLOCKED,
            self::OUTCOME_REFUSED_RECIPIENT_ACCOUNT_CLOSED,
            self::OUTCOME_REFUSED_DAILY_DIRECT_DEBIT_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_DAILY_TRANSFERS_OUT_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_RULES,
            self::OUTCOME_REFUSED_TOTAL_INBOUND_DIRECT_DEBIT_DAILY_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_TOTAL_OUTBOUND_BPAY_DAILY_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_TOTAL_NET_VISA_DAILY_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_TOTAL_NON_SCHEME_DAILY_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_BPAY_INVALID_BILLER_CODE,
            self::OUTCOME_REFUSED_BPAY_INVALID_REFERENCE,
            self::OUTCOME_REFUSED_BPAY_INVALID_PAYMENT,
            self::OUTCOME_REFUSED_BPAY_REJECTED,
            self::OUTCOME_REFUSED_DAILY_CARD_TRANSACTIONS_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_SINGLE_CARD_TRANSACTION_LIMIT_BREACHED,
            self::OUTCOME_REFUSED_SANCTIONS,
            self::OUTCOME_REFUSED_UNABLE_TO_VALIDATE,
            self::OUTCOME_REFUSED_INSUFFICIENT_DATA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardPreferenceOutcomeAllowableValues()
    {
        return [
            self::CARD_PREFERENCE_OUTCOME_CARD_FROZEN,
            self::CARD_PREFERENCE_OUTCOME_CARD_NOT_PRESENT_DISABLED,
            self::CARD_PREFERENCE_OUTCOME_CASH_WITHDRAWAL_DISABLED,
            self::CARD_PREFERENCE_OUTCOME_CONTACTLESS_DISABLED,
            self::CARD_PREFERENCE_OUTCOME_OVERSEAS_SPENDING_DISABLED,
            self::CARD_PREFERENCE_OUTCOME_MAGNETIC_STRIPE_PAYMENT_DISABLED,
            self::CARD_PREFERENCE_OUTCOME_MOBILE_WALLET_PAYMENT_DISABLED,
            self::CARD_PREFERENCE_OUTCOME_OK,
            self::CARD_PREFERENCE_OUTCOME_CARD_BLOCKED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardProcessorResponseAllowableValues()
    {
        return [
            self::CARD_PROCESSOR_RESPONSE_INCORRECT_PIN,
            self::CARD_PROCESSOR_RESPONSE_REFUSED_CARD_BLOCKED,
            self::CARD_PROCESSOR_RESPONSE_RESTRICTED_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_CARD_TRANSACTION,
            self::TRANSACTION_TYPE_CARD_TRANSACTION_REFUND,
            self::TRANSACTION_TYPE_CARD_TRANSACTION_SETTLED,
            self::TRANSACTION_TYPE_INTRABANK_TRANSFER_IN,
            self::TRANSACTION_TYPE_INTRABANK_TRANSFER_OUT,
            self::TRANSACTION_TYPE_INTERBANK_TRANSFER_IN,
            self::TRANSACTION_TYPE_INTERBANK_TRANSFER_OUT,
            self::TRANSACTION_TYPE_DIRECT_DEBIT_TRANSFER,
            self::TRANSACTION_TYPE_HAY_TOP_UP,
            self::TRANSACTION_TYPE_INTERBANK_TRANSFER_OUT_REVERSAL,
            self::TRANSACTION_TYPE_REWARD,
            self::TRANSACTION_TYPE_GENERAL_CREDIT,
            self::TRANSACTION_TYPE_GENERAL_DEBIT,
            self::TRANSACTION_TYPE_ORIGINAL_CREDIT,
            self::TRANSACTION_TYPE_BPAY_TRANSFER_OUT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginTypeAllowableValues()
    {
        return [
            self::ORIGIN_TYPE_CUSTOMER,
            self::ORIGIN_TYPE_SCHEDULED_PAYMENT,
            self::ORIGIN_TYPE_HAAS_OPERATIONS,
            self::ORIGIN_TYPE_OPERATIONS,
            self::ORIGIN_TYPE_MANDATE_PAYMENT,
            self::ORIGIN_TYPE_DIRECT_DEBIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('transaction_hay_id', $data ?? [], null);
        $this->setIfExists('hold_hay_id', $data ?? [], null);
        $this->setIfExists('account_hay_id', $data ?? [], null);
        $this->setIfExists('currency_amount', $data ?? [], null);
        $this->setIfExists('updated_balance', $data ?? [], null);
        $this->setIfExists('is_pending', $data ?? [], null);
        $this->setIfExists('counterpart_name', $data ?? [], null);
        $this->setIfExists('outcome', $data ?? [], null);
        $this->setIfExists('transaction_time_utc', $data ?? [], null);
        $this->setIfExists('card_preference_outcome', $data ?? [], null);
        $this->setIfExists('card_processor_response', $data ?? [], null);
        $this->setIfExists('merchant_name', $data ?? [], null);
        $this->setIfExists('is_atm_transaction', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('card_usage_details', $data ?? [], null);
        $this->setIfExists('account_balances', $data ?? [], null);
        $this->setIfExists('card_hay_id', $data ?? [], null);
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('rule_details', $data ?? [], null);
        $this->setIfExists('counterpart_details', $data ?? [], null);
        $this->setIfExists('origin_id', $data ?? [], null);
        $this->setIfExists('origin_type', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('mandate_payment_details', $data ?? [], null);
        $this->setIfExists('return_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getOutcomeAllowableValues();
        if (!is_null($this->container['outcome']) && !in_array($this->container['outcome'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'outcome', must be one of '%s'",
                $this->container['outcome'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardPreferenceOutcomeAllowableValues();
        if (!is_null($this->container['card_preference_outcome']) && !in_array($this->container['card_preference_outcome'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_preference_outcome', must be one of '%s'",
                $this->container['card_preference_outcome'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardProcessorResponseAllowableValues();
        if (!is_null($this->container['card_processor_response']) && !in_array($this->container['card_processor_response'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_processor_response', must be one of '%s'",
                $this->container['card_processor_response'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOriginTypeAllowableValues();
        if (!is_null($this->container['origin_type']) && !in_array($this->container['origin_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'origin_type', must be one of '%s'",
                $this->container['origin_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_hay_id
     *
     * @return string|null
     */
    public function getTransactionHayId(): ?string
    {
        return $this->container['transaction_hay_id'];
    }

    /**
     * Sets transaction_hay_id
     *
     * @param string|null $transaction_hay_id Unique identifier (UUID) of the Transaction associated with the event
     *
     * @return $this
     */
    public function setTransactionHayId(?string $transaction_hay_id): static
    {
        if (is_null($transaction_hay_id)) {
            throw new InvalidArgumentException('non-nullable transaction_hay_id cannot be null');
        }
        $this->container['transaction_hay_id'] = $transaction_hay_id;

        return $this;
    }

    /**
     * Gets hold_hay_id
     *
     * @return string|null
     */
    public function getHoldHayId(): ?string
    {
        return $this->container['hold_hay_id'];
    }

    /**
     * Sets hold_hay_id
     *
     * @param string|null $hold_hay_id Unique identifier (UUID) of the Hold associated with the event (only applicable to card transactions). This is also referred to as `relatedHoldHayId` when `isPending` flag is `false`.
     *
     * @return $this
     */
    public function setHoldHayId(?string $hold_hay_id): static
    {
        if (is_null($hold_hay_id)) {
            throw new InvalidArgumentException('non-nullable hold_hay_id cannot be null');
        }
        $this->container['hold_hay_id'] = $hold_hay_id;

        return $this;
    }

    /**
     * Gets account_hay_id
     *
     * @return string|null
     */
    public function getAccountHayId(): ?string
    {
        return $this->container['account_hay_id'];
    }

    /**
     * Sets account_hay_id
     *
     * @param string|null $account_hay_id Unique identifier (UUID) of the Account associated with the event
     *
     * @return $this
     */
    public function setAccountHayId(?string $account_hay_id): static
    {
        if (is_null($account_hay_id)) {
            throw new InvalidArgumentException('non-nullable account_hay_id cannot be null');
        }
        $this->container['account_hay_id'] = $account_hay_id;

        return $this;
    }

    /**
     * Gets currency_amount
     *
     * @return \Shaype\Webhook\Model\CurrencyAmount|null
     */
    public function getCurrencyAmount(): ?\Shaype\Webhook\Model\CurrencyAmount
    {
        return $this->container['currency_amount'];
    }

    /**
     * Sets currency_amount
     *
     * @param \Shaype\Webhook\Model\CurrencyAmount|null $currency_amount currency_amount
     *
     * @return $this
     */
    public function setCurrencyAmount(?\Shaype\Webhook\Model\CurrencyAmount $currency_amount): static
    {
        if (is_null($currency_amount)) {
            throw new InvalidArgumentException('non-nullable currency_amount cannot be null');
        }
        $this->container['currency_amount'] = $currency_amount;

        return $this;
    }

    /**
     * Gets updated_balance
     *
     * @return \Shaype\Webhook\Model\CurrencyAmount|null
     */
    public function getUpdatedBalance(): ?\Shaype\Webhook\Model\CurrencyAmount
    {
        return $this->container['updated_balance'];
    }

    /**
     * Sets updated_balance
     *
     * @param \Shaype\Webhook\Model\CurrencyAmount|null $updated_balance updated_balance
     *
     * @return $this
     */
    public function setUpdatedBalance(?\Shaype\Webhook\Model\CurrencyAmount $updated_balance): static
    {
        if (is_null($updated_balance)) {
            throw new InvalidArgumentException('non-nullable updated_balance cannot be null');
        }
        $this->container['updated_balance'] = $updated_balance;

        return $this;
    }

    /**
     * Gets is_pending
     *
     * @return bool|null
     */
    public function getIsPending(): ?bool
    {
        return $this->container['is_pending'];
    }

    /**
     * Sets is_pending
     *
     * @param bool|null $is_pending Specifies whether the transaction is still pending
     *
     * @return $this
     */
    public function setIsPending(?bool $is_pending): static
    {
        if (is_null($is_pending)) {
            throw new InvalidArgumentException('non-nullable is_pending cannot be null');
        }
        $this->container['is_pending'] = $is_pending;

        return $this;
    }

    /**
     * Gets counterpart_name
     *
     * @return string|null
     */
    public function getCounterpartName(): ?string
    {
        return $this->container['counterpart_name'];
    }

    /**
     * Sets counterpart_name
     *
     * @param string|null $counterpart_name Transaction counterpart name
     *
     * @return $this
     */
    public function setCounterpartName(?string $counterpart_name): static
    {
        if (is_null($counterpart_name)) {
            throw new InvalidArgumentException('non-nullable counterpart_name cannot be null');
        }
        $this->container['counterpart_name'] = $counterpart_name;

        return $this;
    }

    /**
     * Gets outcome
     *
     * @return string|null
     */
    public function getOutcome(): ?string
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     *
     * @param string|null $outcome Authorisation outcome type - for possible values, please see relevant guidance on Transactions
     *
     * @return $this
     */
    public function setOutcome(?string $outcome): static
    {
        if (is_null($outcome)) {
            throw new InvalidArgumentException('non-nullable outcome cannot be null');
        }
        $allowedValues = $this->getOutcomeAllowableValues();
        if (!in_array($outcome, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'outcome', must be one of '%s'",
                    $outcome,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets transaction_time_utc
     *
     * @return \DateTime|null
     */
    public function getTransactionTimeUtc(): ?\DateTime
    {
        return $this->container['transaction_time_utc'];
    }

    /**
     * Sets transaction_time_utc
     *
     * @param \DateTime|null $transaction_time_utc Transaction date and time
     *
     * @return $this
     */
    public function setTransactionTimeUtc(?\DateTime $transaction_time_utc): static
    {
        if (is_null($transaction_time_utc)) {
            throw new InvalidArgumentException('non-nullable transaction_time_utc cannot be null');
        }
        $this->container['transaction_time_utc'] = $transaction_time_utc;

        return $this;
    }

    /**
     * Gets card_preference_outcome
     *
     * @return string|null
     */
    public function getCardPreferenceOutcome(): ?string
    {
        return $this->container['card_preference_outcome'];
    }

    /**
     * Sets card_preference_outcome
     *
     * @param string|null $card_preference_outcome Outcome of the card preferences check - for possible values, please see relevant guidance on Transactions
     *
     * @return $this
     */
    public function setCardPreferenceOutcome(?string $card_preference_outcome): static
    {
        if (is_null($card_preference_outcome)) {
            throw new InvalidArgumentException('non-nullable card_preference_outcome cannot be null');
        }
        $allowedValues = $this->getCardPreferenceOutcomeAllowableValues();
        if (!in_array($card_preference_outcome, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_preference_outcome', must be one of '%s'",
                    $card_preference_outcome,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_preference_outcome'] = $card_preference_outcome;

        return $this;
    }

    /**
     * Gets card_processor_response
     *
     * @return string|null
     */
    public function getCardProcessorResponse(): ?string
    {
        return $this->container['card_processor_response'];
    }

    /**
     * Sets card_processor_response
     *
     * @param string|null $card_processor_response Card processor response - for possible values, please see relevant guidance on Transactions
     *
     * @return $this
     */
    public function setCardProcessorResponse(?string $card_processor_response): static
    {
        if (is_null($card_processor_response)) {
            throw new InvalidArgumentException('non-nullable card_processor_response cannot be null');
        }
        $allowedValues = $this->getCardProcessorResponseAllowableValues();
        if (!in_array($card_processor_response, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_processor_response', must be one of '%s'",
                    $card_processor_response,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_processor_response'] = $card_processor_response;

        return $this;
    }

    /**
     * Gets merchant_name
     *
     * @return string|null
     */
    public function getMerchantName(): ?string
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     *
     * @param string|null $merchant_name Merchant name
     *
     * @return $this
     */
    public function setMerchantName(?string $merchant_name): static
    {
        if (is_null($merchant_name)) {
            throw new InvalidArgumentException('non-nullable merchant_name cannot be null');
        }
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets is_atm_transaction
     *
     * @return bool|null
     * @deprecated
     */
    public function getIsAtmTransaction(): ?bool
    {
        return $this->container['is_atm_transaction'];
    }

    /**
     * Sets is_atm_transaction
     *
     * @param bool|null $is_atm_transaction Specifies whether the transaction is an ATM transaction
     *
     * @return $this
     * @deprecated
     */
    public function setIsAtmTransaction(?bool $is_atm_transaction): static
    {
        if (is_null($is_atm_transaction)) {
            throw new InvalidArgumentException('non-nullable is_atm_transaction cannot be null');
        }
        $this->container['is_atm_transaction'] = $is_atm_transaction;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType(): ?string
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Transaction type:  * **CARD_TRANSACTION**: Card transaction  * **CARD_TRANSACTION_REFUND**: A refund of a card transaction  * **CARD_TRANSACTION_SETTLED**: A settlement of a card transaction  * **INTRABANK_TRANSFER_IN**: Incoming internal transfer  * **INTRABANK_TRANSFER_OUT**: Outgoing internal transfer  * **INTERBANK_TRANSFER_IN**: Incoming external bank transfer  * **INTERBANK_TRANSFER_OUT**: Outgoing external bank transfer  * **DIRECT_DEBIT_TRANSFER**: Direct Debit  * **HAY_TOP_UP**: An account top-up  * **INTERBANK_TRANSFER_OUT_REVERSAL**: A reversal of an outgoing external transfer  * **REWARD**: A reward credited to the account  * **GENERAL_CREDIT**: A general account credit  * **GENERAL_DEBIT**: A general account debit  * **ORIGINAL_CREDIT**: Visa Original Credit transaction  * **BPAY_TRANSFER_OUT**: Outgoing BPAY transfer
     *
     * @return $this
     */
    public function setTransactionType(?string $transaction_type): static
    {
        if (is_null($transaction_type)) {
            throw new InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets card_usage_details
     *
     * @return \Shaype\Webhook\Model\CardUsageDetails|null
     */
    public function getCardUsageDetails(): ?\Shaype\Webhook\Model\CardUsageDetails
    {
        return $this->container['card_usage_details'];
    }

    /**
     * Sets card_usage_details
     *
     * @param \Shaype\Webhook\Model\CardUsageDetails|null $card_usage_details card_usage_details
     *
     * @return $this
     */
    public function setCardUsageDetails(?\Shaype\Webhook\Model\CardUsageDetails $card_usage_details): static
    {
        if (is_null($card_usage_details)) {
            throw new InvalidArgumentException('non-nullable card_usage_details cannot be null');
        }
        $this->container['card_usage_details'] = $card_usage_details;

        return $this;
    }

    /**
     * Gets account_balances
     *
     * @return \Shaype\Webhook\Model\AccountBalancesDto|null
     */
    public function getAccountBalances(): ?\Shaype\Webhook\Model\AccountBalancesDto
    {
        return $this->container['account_balances'];
    }

    /**
     * Sets account_balances
     *
     * @param \Shaype\Webhook\Model\AccountBalancesDto|null $account_balances account_balances
     *
     * @return $this
     */
    public function setAccountBalances(?\Shaype\Webhook\Model\AccountBalancesDto $account_balances): static
    {
        if (is_null($account_balances)) {
            throw new InvalidArgumentException('non-nullable account_balances cannot be null');
        }
        $this->container['account_balances'] = $account_balances;

        return $this;
    }

    /**
     * Gets card_hay_id
     *
     * @return string|null
     */
    public function getCardHayId(): ?string
    {
        return $this->container['card_hay_id'];
    }

    /**
     * Sets card_hay_id
     *
     * @param string|null $card_hay_id Unique identifier (UUID) of the Card associated with the event
     *
     * @return $this
     */
    public function setCardHayId(?string $card_hay_id): static
    {
        if (is_null($card_hay_id)) {
            throw new InvalidArgumentException('non-nullable card_hay_id cannot be null');
        }
        $this->container['card_hay_id'] = $card_hay_id;

        return $this;
    }

    /**
     * Gets customer_hay_id
     *
     * @return string|null
     */
    public function getCustomerHayId(): ?string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string|null $customer_hay_id Unique identifier (UUID) of the Customer associated with the event
     *
     * @return $this
     */
    public function setCustomerHayId(?string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets rule_details
     *
     * @return \Shaype\Webhook\Model\RuleDetails|null
     */
    public function getRuleDetails(): ?\Shaype\Webhook\Model\RuleDetails
    {
        return $this->container['rule_details'];
    }

    /**
     * Sets rule_details
     *
     * @param \Shaype\Webhook\Model\RuleDetails|null $rule_details rule_details
     *
     * @return $this
     */
    public function setRuleDetails(?\Shaype\Webhook\Model\RuleDetails $rule_details): static
    {
        if (is_null($rule_details)) {
            throw new InvalidArgumentException('non-nullable rule_details cannot be null');
        }
        $this->container['rule_details'] = $rule_details;

        return $this;
    }

    /**
     * Gets counterpart_details
     *
     * @return \Shaype\Webhook\Model\CounterpartDetails|null
     */
    public function getCounterpartDetails(): ?\Shaype\Webhook\Model\CounterpartDetails
    {
        return $this->container['counterpart_details'];
    }

    /**
     * Sets counterpart_details
     *
     * @param \Shaype\Webhook\Model\CounterpartDetails|null $counterpart_details counterpart_details
     *
     * @return $this
     */
    public function setCounterpartDetails(?\Shaype\Webhook\Model\CounterpartDetails $counterpart_details): static
    {
        if (is_null($counterpart_details)) {
            throw new InvalidArgumentException('non-nullable counterpart_details cannot be null');
        }
        $this->container['counterpart_details'] = $counterpart_details;

        return $this;
    }

    /**
     * Gets origin_id
     *
     * @return string|null
     */
    public function getOriginId(): ?string
    {
        return $this->container['origin_id'];
    }

    /**
     * Sets origin_id
     *
     * @param string|null $origin_id Transaction origin ID (to be used with `originType`).
     *
     * @return $this
     */
    public function setOriginId(?string $origin_id): static
    {
        if (is_null($origin_id)) {
            throw new InvalidArgumentException('non-nullable origin_id cannot be null');
        }
        $this->container['origin_id'] = $origin_id;

        return $this;
    }

    /**
     * Gets origin_type
     *
     * @return string|null
     */
    public function getOriginType(): ?string
    {
        return $this->container['origin_type'];
    }

    /**
     * Sets origin_type
     *
     * @param string|null $origin_type Transaction origin type:  * **CUSTOMER**: Transaction initiated by a customer  * **SCHEDULED_PAYMENT**: Transaction initiated by a schedule  * **HAAS_OPERATIONS**: Transaction initiated by client operations  * **OPERATIONS**: Transaction initiated by Shaype operations  * **MANDATE_PAYMENT**: Transaction initiated by mandate  * **DIRECT_DEBIT**: Transaction initiated by direct debit
     *
     * @return $this
     */
    public function setOriginType(?string $origin_type): static
    {
        if (is_null($origin_type)) {
            throw new InvalidArgumentException('non-nullable origin_type cannot be null');
        }
        $allowedValues = $this->getOriginTypeAllowableValues();
        if (!in_array($origin_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'origin_type', must be one of '%s'",
                    $origin_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['origin_type'] = $origin_type;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory(): ?string
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Category of the transaction.
     *
     * @return $this
     */
    public function setCategory(?string $category): static
    {
        if (is_null($category)) {
            throw new InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId(): ?string
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id Merchant ID, alphanumeric / special characters maximum 15 characters in length.
     *
     * @return $this
     */
    public function setMerchantId(?string $merchant_id): static
    {
        if (is_null($merchant_id)) {
            throw new InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description on the Transaction
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets mandate_payment_details
     *
     * @return \Shaype\Webhook\Model\MandatePaymentDetails|null
     */
    public function getMandatePaymentDetails(): ?\Shaype\Webhook\Model\MandatePaymentDetails
    {
        return $this->container['mandate_payment_details'];
    }

    /**
     * Sets mandate_payment_details
     *
     * @param \Shaype\Webhook\Model\MandatePaymentDetails|null $mandate_payment_details mandate_payment_details
     *
     * @return $this
     */
    public function setMandatePaymentDetails(?\Shaype\Webhook\Model\MandatePaymentDetails $mandate_payment_details): static
    {
        if (is_null($mandate_payment_details)) {
            throw new InvalidArgumentException('non-nullable mandate_payment_details cannot be null');
        }
        $this->container['mandate_payment_details'] = $mandate_payment_details;

        return $this;
    }

    /**
     * Gets return_reason
     *
     * @return \Shaype\Webhook\Model\ReturnReason|null
     */
    public function getReturnReason(): ?\Shaype\Webhook\Model\ReturnReason
    {
        return $this->container['return_reason'];
    }

    /**
     * Sets return_reason
     *
     * @param \Shaype\Webhook\Model\ReturnReason|null $return_reason return_reason
     *
     * @return $this
     */
    public function setReturnReason(?\Shaype\Webhook\Model\ReturnReason $return_reason): static
    {
        if (is_null($return_reason)) {
            throw new InvalidArgumentException('non-nullable return_reason cannot be null');
        }
        $this->container['return_reason'] = $return_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


