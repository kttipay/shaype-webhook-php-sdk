<?php
/**
 * MandatePaymentEventDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification Webhooks
 *
 * Definition of the webhooks API for client callbacks
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * MandatePaymentEventDto Class Doc Comment
 *
 * @description Details of the **Mandate Payment** event; provided when the type is &#x60;MANDATE_PAYMENT&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MandatePaymentEventDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MandatePaymentEventDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'instruction_id' => 'string',
        'mandate_id' => 'string',
        'payment_status' => 'string',
        'reason_code' => 'string',
        'transaction_hay_id' => 'string',
        'is_final' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'instruction_id' => null,
        'mandate_id' => 'uuid',
        'payment_status' => null,
        'reason_code' => null,
        'transaction_hay_id' => 'uuid',
        'is_final' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'instruction_id' => false,
        'mandate_id' => false,
        'payment_status' => false,
        'reason_code' => false,
        'transaction_hay_id' => false,
        'is_final' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'instruction_id' => 'instructionId',
        'mandate_id' => 'mandateId',
        'payment_status' => 'paymentStatus',
        'reason_code' => 'reasonCode',
        'transaction_hay_id' => 'transactionHayId',
        'is_final' => 'isFinal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'instruction_id' => 'setInstructionId',
        'mandate_id' => 'setMandateId',
        'payment_status' => 'setPaymentStatus',
        'reason_code' => 'setReasonCode',
        'transaction_hay_id' => 'setTransactionHayId',
        'is_final' => 'setIsFinal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'instruction_id' => 'getInstructionId',
        'mandate_id' => 'getMandateId',
        'payment_status' => 'getPaymentStatus',
        'reason_code' => 'getReasonCode',
        'transaction_hay_id' => 'getTransactionHayId',
        'is_final' => 'getIsFinal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_STATUS_ACCEPTED = 'MANDATE_PAYMENT_ACCEPTED';
    public const PAYMENT_STATUS_ACCEPTED_FOR_CLEARANCE = 'MANDATE_PAYMENT_ACCEPTED_FOR_CLEARANCE';
    public const PAYMENT_STATUS_PENDING = 'MANDATE_PAYMENT_PENDING';
    public const PAYMENT_STATUS_RECEIVED = 'MANDATE_PAYMENT_RECEIVED';
    public const PAYMENT_STATUS_REJECTED = 'MANDATE_PAYMENT_REJECTED';
    public const PAYMENT_STATUS_SENT = 'MANDATE_PAYMENT_SENT';
    public const PAYMENT_STATUS_SETTLEMENT_ABORTED = 'MANDATE_PAYMENT_SETTLEMENT_ABORTED';
    public const PAYMENT_STATUS_STORE_AND_FORWARD = 'MANDATE_PAYMENT_STORE_AND_FORWARD';
    public const PAYMENT_STATUS_UNDELIVERED = 'MANDATE_PAYMENT_UNDELIVERED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_ACCEPTED,
            self::PAYMENT_STATUS_ACCEPTED_FOR_CLEARANCE,
            self::PAYMENT_STATUS_PENDING,
            self::PAYMENT_STATUS_RECEIVED,
            self::PAYMENT_STATUS_REJECTED,
            self::PAYMENT_STATUS_SENT,
            self::PAYMENT_STATUS_SETTLEMENT_ABORTED,
            self::PAYMENT_STATUS_STORE_AND_FORWARD,
            self::PAYMENT_STATUS_UNDELIVERED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('instruction_id', $data ?? [], null);
        $this->setIfExists('mandate_id', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('reason_code', $data ?? [], null);
        $this->setIfExists('transaction_hay_id', $data ?? [], null);
        $this->setIfExists('is_final', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instruction_id
     *
     * @return string|null
     */
    public function getInstructionId(): ?string
    {
        return $this->container['instruction_id'];
    }

    /**
     * Sets instruction_id
     *
     * @param string|null $instruction_id Instruction identification
     *
     * @return $this
     */
    public function setInstructionId(?string $instruction_id): static
    {
        if (is_null($instruction_id)) {
            throw new InvalidArgumentException('non-nullable instruction_id cannot be null');
        }
        $this->container['instruction_id'] = $instruction_id;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string|null
     */
    public function getMandateId(): ?string
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string|null $mandate_id Mandate identifier
     *
     * @return $this
     */
    public function setMandateId(?string $mandate_id): static
    {
        if (is_null($mandate_id)) {
            throw new InvalidArgumentException('non-nullable mandate_id cannot be null');
        }
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus(): ?string
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status Payment Status * **RECEIVED**: Message has been received, no further update on status yet. Please continue to check for updates. * **UNDELIVERED**: Message could not be delivered to the PayTo rails (PAG). Client should retry initiation. * **SENT**: Message has been sent, no acknowledgement yet received. Please continue to check for updates. * **STORE_AND_FORWARD**: Target institution is not available, but message will be relayed when they are back online. Please continue to check for updates. * **ACCEPTED_FOR_CLEARANCE**: Payment is accepted but settlement not initiated. Please continue to check for updates. * **SETTLEMENT_ABORTED**: Settlement could not be completed. A retry attempt will be made on behalf of the client. Please continue to check for updates. * **ACCEPTED_AND_SETTLED**: Settlement completed. * **REJECTED**: Payment could not be completed. Request could be modified and resubmitted - or if unexpected problem then please contact Shaype team for support. * **PENDING**: Settlement queued for handling but not complete. Please continue to check for updates
     *
     * @return $this
     */
    public function setPaymentStatus(?string $payment_status): static
    {
        if (is_null($payment_status)) {
            throw new InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode(): ?string
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code Payment rejection reason code
     *
     * @return $this
     */
    public function setReasonCode(?string $reason_code): static
    {
        if (is_null($reason_code)) {
            throw new InvalidArgumentException('non-nullable reason_code cannot be null');
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets transaction_hay_id
     *
     * @return string|null
     */
    public function getTransactionHayId(): ?string
    {
        return $this->container['transaction_hay_id'];
    }

    /**
     * Sets transaction_hay_id
     *
     * @param string|null $transaction_hay_id Transaction identifier. When payment status is rejected, transaction identifier is null
     *
     * @return $this
     */
    public function setTransactionHayId(?string $transaction_hay_id): static
    {
        if (is_null($transaction_hay_id)) {
            throw new InvalidArgumentException('non-nullable transaction_hay_id cannot be null');
        }
        $this->container['transaction_hay_id'] = $transaction_hay_id;

        return $this;
    }

    /**
     * Gets is_final
     *
     * @return bool|null
     */
    public function getIsFinal(): ?bool
    {
        return $this->container['is_final'];
    }

    /**
     * Sets is_final
     *
     * @param bool|null $is_final Whether the payment status is final
     *
     * @return $this
     */
    public function setIsFinal(?bool $is_final): static
    {
        if (is_null($is_final)) {
            throw new InvalidArgumentException('non-nullable is_final cannot be null');
        }
        $this->container['is_final'] = $is_final;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


