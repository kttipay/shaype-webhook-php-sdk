<?php
/**
 * EmailDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification Webhooks
 *
 * Definition of the webhooks API for client callbacks
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * EmailDto Class Doc Comment
 *
 * @description Details of the email notification
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class EmailDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'EmailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'idempotency_key' => 'string',
        'email_address' => 'string',
        'type' => 'string',
        'customer_details' => '\OpenAPI\Client\Model\CustomerDetails',
        'card_hay_id' => 'string',
        'card_addition_to_wallet_event' => '\OpenAPI\Client\Model\CardAdditionToWalletEventDto',
        'card_pin_change_event' => '\OpenAPI\Client\Model\CardPinChangeEventDto',
        'customer_details_change_event' => '\OpenAPI\Client\Model\CustomerDetailsChangeEventDto',
        'magic_link_event' => '\OpenAPI\Client\Model\MagicLinkEventDto',
        'reminder_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'idempotency_key' => 'uuid',
        'email_address' => null,
        'type' => null,
        'customer_details' => null,
        'card_hay_id' => 'uuid',
        'card_addition_to_wallet_event' => null,
        'card_pin_change_event' => null,
        'customer_details_change_event' => null,
        'magic_link_event' => null,
        'reminder_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'idempotency_key' => false,
        'email_address' => false,
        'type' => false,
        'customer_details' => false,
        'card_hay_id' => false,
        'card_addition_to_wallet_event' => false,
        'card_pin_change_event' => false,
        'customer_details_change_event' => false,
        'magic_link_event' => false,
        'reminder_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'idempotency_key' => 'idempotencyKey',
        'email_address' => 'emailAddress',
        'type' => 'type',
        'customer_details' => 'customerDetails',
        'card_hay_id' => 'cardHayId',
        'card_addition_to_wallet_event' => 'cardAdditionToWalletEvent',
        'card_pin_change_event' => 'cardPinChangeEvent',
        'customer_details_change_event' => 'customerDetailsChangeEvent',
        'magic_link_event' => 'magicLinkEvent',
        'reminder_type' => 'reminderType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'idempotency_key' => 'setIdempotencyKey',
        'email_address' => 'setEmailAddress',
        'type' => 'setType',
        'customer_details' => 'setCustomerDetails',
        'card_hay_id' => 'setCardHayId',
        'card_addition_to_wallet_event' => 'setCardAdditionToWalletEvent',
        'card_pin_change_event' => 'setCardPinChangeEvent',
        'customer_details_change_event' => 'setCustomerDetailsChangeEvent',
        'magic_link_event' => 'setMagicLinkEvent',
        'reminder_type' => 'setReminderType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'idempotency_key' => 'getIdempotencyKey',
        'email_address' => 'getEmailAddress',
        'type' => 'getType',
        'customer_details' => 'getCustomerDetails',
        'card_hay_id' => 'getCardHayId',
        'card_addition_to_wallet_event' => 'getCardAdditionToWalletEvent',
        'card_pin_change_event' => 'getCardPinChangeEvent',
        'customer_details_change_event' => 'getCustomerDetailsChangeEvent',
        'magic_link_event' => 'getMagicLinkEvent',
        'reminder_type' => 'getReminderType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CARD_ADDED_TO_WALLET = 'CARD_ADDED_TO_WALLET';
    public const TYPE_CARD_PIN_CHANGE = 'CARD_PIN_CHANGE';
    public const TYPE_CUSTOMER_DETAILS_CHANGE = 'CUSTOMER_DETAILS_CHANGE';
    public const TYPE_MAGIC_LINK = 'MAGIC_LINK';
    public const TYPE_REMINDER = 'REMINDER';
    public const REMINDER_TYPE_REMINDER_TO_COMPLETE_FUNDING = 'REMINDER_TO_COMPLETE_FUNDING';
    public const REMINDER_TYPE_REMINDER_TO_PROVISION_DIGITAL_CARD = 'REMINDER_TO_PROVISION_DIGITAL_CARD';
    public const REMINDER_TYPE_REMINDER_TO_TRANSACT = 'REMINDER_TO_TRANSACT';
    public const REMINDER_TYPE_APPLE_PAY_REMINDER_24_HRS = 'APPLE_PAY_REMINDER_24_HRS';
    public const REMINDER_TYPE_APPLE_PAY_REMINDER_7_DAYS = 'APPLE_PAY_REMINDER_7_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_7_DAYS = 'APPLE_PAY_SPEND_REMINDER_7_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_14_DAYS = 'APPLE_PAY_SPEND_REMINDER_14_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_ADDITION_REWARD = 'APPLE_PAY_ADDITION_REWARD';
    public const REMINDER_TYPE_APPLE_PAY_SPEND_REWARD = 'APPLE_PAY_SPEND_REWARD';
    public const REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS = 'APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS = 'APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS = 'APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS';
    public const REMINDER_TYPE_GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING = 'GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING';
    public const REMINDER_TYPE_GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING = 'GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING';
    public const REMINDER_TYPE_GOOGLE_PAY_7_DAYS_SPEND_REMINDER = 'GOOGLE_PAY_7_DAYS_SPEND_REMINDER';
    public const REMINDER_TYPE_GOOGLE_PAY_14_DAYS_SPEND_REMINDER = 'GOOGLE_PAY_14_DAYS_SPEND_REMINDER';
    public const REMINDER_TYPE_CARD_EXPIRY_MONTH_REMINDER = 'CARD_EXPIRY_MONTH_REMINDER';
    public const REMINDER_TYPE_CARD_EXPIRY_2_WEEK_REMINDER = 'CARD_EXPIRY_2_WEEK_REMINDER';
    public const REMINDER_TYPE_CARD_EXPIRY_DAY_REMINDER = 'CARD_EXPIRY_DAY_REMINDER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD_ADDED_TO_WALLET,
            self::TYPE_CARD_PIN_CHANGE,
            self::TYPE_CUSTOMER_DETAILS_CHANGE,
            self::TYPE_MAGIC_LINK,
            self::TYPE_REMINDER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReminderTypeAllowableValues()
    {
        return [
            self::REMINDER_TYPE_REMINDER_TO_COMPLETE_FUNDING,
            self::REMINDER_TYPE_REMINDER_TO_PROVISION_DIGITAL_CARD,
            self::REMINDER_TYPE_REMINDER_TO_TRANSACT,
            self::REMINDER_TYPE_APPLE_PAY_REMINDER_24_HRS,
            self::REMINDER_TYPE_APPLE_PAY_REMINDER_7_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_7_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_14_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_ADDITION_REWARD,
            self::REMINDER_TYPE_APPLE_PAY_SPEND_REWARD,
            self::REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS,
            self::REMINDER_TYPE_GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING,
            self::REMINDER_TYPE_GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING,
            self::REMINDER_TYPE_GOOGLE_PAY_7_DAYS_SPEND_REMINDER,
            self::REMINDER_TYPE_GOOGLE_PAY_14_DAYS_SPEND_REMINDER,
            self::REMINDER_TYPE_CARD_EXPIRY_MONTH_REMINDER,
            self::REMINDER_TYPE_CARD_EXPIRY_2_WEEK_REMINDER,
            self::REMINDER_TYPE_CARD_EXPIRY_DAY_REMINDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('customer_details', $data ?? [], null);
        $this->setIfExists('card_hay_id', $data ?? [], null);
        $this->setIfExists('card_addition_to_wallet_event', $data ?? [], null);
        $this->setIfExists('card_pin_change_event', $data ?? [], null);
        $this->setIfExists('customer_details_change_event', $data ?? [], null);
        $this->setIfExists('magic_link_event', $data ?? [], null);
        $this->setIfExists('reminder_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['email_address'] === null) {
            $invalidProperties[] = "'email_address' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReminderTypeAllowableValues();
        if (!is_null($this->container['reminder_type']) && !in_array($this->container['reminder_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reminder_type', must be one of '%s'",
                $this->container['reminder_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey(): string
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Idempotency key (UUID) to uniquely represent this request and prevent duplication.
     *
     * @return $this
     */
    public function setIdempotencyKey(string $idempotency_key): static
    {
        if (is_null($idempotency_key)) {
            throw new InvalidArgumentException('non-nullable idempotency_key cannot be null');
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress(): string
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address Email address to send the email notification to.
     *
     * @return $this
     */
    public function setEmailAddress(string $email_address): static
    {
        if (is_null($email_address)) {
            throw new InvalidArgumentException('non-nullable email_address cannot be null');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the notification event - one of:  * **CARD_ADDED_TO_WALLET**: Card has been added to a device wallet  * **CARD_PIN_CHANGE**: Card PIN has been changed  * **CUSTOMER_DETAILS_CHANGE**: Customer's personal details have been updated  * **MAGIC_LINK**: Magic link email has been requested  * **REMINDER**: A reminder
     *
     * @return $this
     */
    public function setType(string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets customer_details
     *
     * @return \OpenAPI\Client\Model\CustomerDetails|null
     */
    public function getCustomerDetails(): ?\OpenAPI\Client\Model\CustomerDetails
    {
        return $this->container['customer_details'];
    }

    /**
     * Sets customer_details
     *
     * @param \OpenAPI\Client\Model\CustomerDetails|null $customer_details customer_details
     *
     * @return $this
     */
    public function setCustomerDetails(?\OpenAPI\Client\Model\CustomerDetails $customer_details): static
    {
        if (is_null($customer_details)) {
            throw new InvalidArgumentException('non-nullable customer_details cannot be null');
        }
        $this->container['customer_details'] = $customer_details;

        return $this;
    }

    /**
     * Gets card_hay_id
     *
     * @return string|null
     */
    public function getCardHayId(): ?string
    {
        return $this->container['card_hay_id'];
    }

    /**
     * Sets card_hay_id
     *
     * @param string|null $card_hay_id Unique identifier (UUID) of the Card associated with the event
     *
     * @return $this
     */
    public function setCardHayId(?string $card_hay_id): static
    {
        if (is_null($card_hay_id)) {
            throw new InvalidArgumentException('non-nullable card_hay_id cannot be null');
        }
        $this->container['card_hay_id'] = $card_hay_id;

        return $this;
    }

    /**
     * Gets card_addition_to_wallet_event
     *
     * @return \OpenAPI\Client\Model\CardAdditionToWalletEventDto|null
     */
    public function getCardAdditionToWalletEvent(): ?\OpenAPI\Client\Model\CardAdditionToWalletEventDto
    {
        return $this->container['card_addition_to_wallet_event'];
    }

    /**
     * Sets card_addition_to_wallet_event
     *
     * @param \OpenAPI\Client\Model\CardAdditionToWalletEventDto|null $card_addition_to_wallet_event card_addition_to_wallet_event
     *
     * @return $this
     */
    public function setCardAdditionToWalletEvent(?\OpenAPI\Client\Model\CardAdditionToWalletEventDto $card_addition_to_wallet_event): static
    {
        if (is_null($card_addition_to_wallet_event)) {
            throw new InvalidArgumentException('non-nullable card_addition_to_wallet_event cannot be null');
        }
        $this->container['card_addition_to_wallet_event'] = $card_addition_to_wallet_event;

        return $this;
    }

    /**
     * Gets card_pin_change_event
     *
     * @return \OpenAPI\Client\Model\CardPinChangeEventDto|null
     */
    public function getCardPinChangeEvent(): ?\OpenAPI\Client\Model\CardPinChangeEventDto
    {
        return $this->container['card_pin_change_event'];
    }

    /**
     * Sets card_pin_change_event
     *
     * @param \OpenAPI\Client\Model\CardPinChangeEventDto|null $card_pin_change_event card_pin_change_event
     *
     * @return $this
     */
    public function setCardPinChangeEvent(?\OpenAPI\Client\Model\CardPinChangeEventDto $card_pin_change_event): static
    {
        if (is_null($card_pin_change_event)) {
            throw new InvalidArgumentException('non-nullable card_pin_change_event cannot be null');
        }
        $this->container['card_pin_change_event'] = $card_pin_change_event;

        return $this;
    }

    /**
     * Gets customer_details_change_event
     *
     * @return \OpenAPI\Client\Model\CustomerDetailsChangeEventDto|null
     */
    public function getCustomerDetailsChangeEvent(): ?\OpenAPI\Client\Model\CustomerDetailsChangeEventDto
    {
        return $this->container['customer_details_change_event'];
    }

    /**
     * Sets customer_details_change_event
     *
     * @param \OpenAPI\Client\Model\CustomerDetailsChangeEventDto|null $customer_details_change_event customer_details_change_event
     *
     * @return $this
     */
    public function setCustomerDetailsChangeEvent(?\OpenAPI\Client\Model\CustomerDetailsChangeEventDto $customer_details_change_event): static
    {
        if (is_null($customer_details_change_event)) {
            throw new InvalidArgumentException('non-nullable customer_details_change_event cannot be null');
        }
        $this->container['customer_details_change_event'] = $customer_details_change_event;

        return $this;
    }

    /**
     * Gets magic_link_event
     *
     * @return \OpenAPI\Client\Model\MagicLinkEventDto|null
     */
    public function getMagicLinkEvent(): ?\OpenAPI\Client\Model\MagicLinkEventDto
    {
        return $this->container['magic_link_event'];
    }

    /**
     * Sets magic_link_event
     *
     * @param \OpenAPI\Client\Model\MagicLinkEventDto|null $magic_link_event magic_link_event
     *
     * @return $this
     */
    public function setMagicLinkEvent(?\OpenAPI\Client\Model\MagicLinkEventDto $magic_link_event): static
    {
        if (is_null($magic_link_event)) {
            throw new InvalidArgumentException('non-nullable magic_link_event cannot be null');
        }
        $this->container['magic_link_event'] = $magic_link_event;

        return $this;
    }

    /**
     * Gets reminder_type
     *
     * @return string|null
     */
    public function getReminderType(): ?string
    {
        return $this->container['reminder_type'];
    }

    /**
     * Sets reminder_type
     *
     * @param string|null $reminder_type Type of the **Reminder** event; provided when the type is `REMINDER`. Possible values:  * **REMINDER_TO_COMPLETE_FUNDING**  * **REMINDER_TO_PROVISION_DIGITAL_CARD**  * **REMINDER_TO_TRANSACT**  * **APPLE_PAY_REMINDER_24_HRS**  * **APPLE_PAY_REMINDER_7_DAYS**  * **APPLE_PAY_SPEND_REMINDER_7_DAYS**  * **APPLE_PAY_SPEND_REMINDER_14_DAYS**  * **GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING**  * **GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING**  * **GOOGLE_PAY_7_DAYS_SPEND_REMINDER**  * **GOOGLE_PAY_14_DAYS_SPEND_REMINDER**
     *
     * @return $this
     */
    public function setReminderType(?string $reminder_type): static
    {
        if (is_null($reminder_type)) {
            throw new InvalidArgumentException('non-nullable reminder_type cannot be null');
        }
        $allowedValues = $this->getReminderTypeAllowableValues();
        if (!in_array($reminder_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reminder_type', must be one of '%s'",
                    $reminder_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reminder_type'] = $reminder_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


