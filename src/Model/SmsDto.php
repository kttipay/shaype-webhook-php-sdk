<?php
/**
 * SmsDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification Webhooks
 *
 * Definition of the webhooks API for client callbacks
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * SmsDto Class Doc Comment
 *
 * @description Details of the SMS notification
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class SmsDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'SmsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'phone_number' => '\OpenAPI\Client\Model\PhoneNumber',
        'type' => 'string',
        'idempotency_key' => 'string',
        'customer_hay_id' => 'string',
        'card_status_change_event' => '\OpenAPI\Client\Model\CardStatusChangeEventDto',
        'account_status_change_event' => '\OpenAPI\Client\Model\AccountStatusChangeEventDto',
        'passcode_change_event' => '\OpenAPI\Client\Model\PasscodeChangeEventDto',
        'phone_number_verification_event' => '\OpenAPI\Client\Model\PhoneNumberVerificationEventDto',
        'customer_otp_event' => '\OpenAPI\Client\Model\CustomerOtpEventDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'phone_number' => null,
        'type' => null,
        'idempotency_key' => 'uuid',
        'customer_hay_id' => 'uuid',
        'card_status_change_event' => null,
        'account_status_change_event' => null,
        'passcode_change_event' => null,
        'phone_number_verification_event' => null,
        'customer_otp_event' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'phone_number' => false,
        'type' => false,
        'idempotency_key' => false,
        'customer_hay_id' => false,
        'card_status_change_event' => false,
        'account_status_change_event' => false,
        'passcode_change_event' => false,
        'phone_number_verification_event' => false,
        'customer_otp_event' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'phone_number' => 'phoneNumber',
        'type' => 'type',
        'idempotency_key' => 'idempotencyKey',
        'customer_hay_id' => 'customerHayId',
        'card_status_change_event' => 'cardStatusChangeEvent',
        'account_status_change_event' => 'accountStatusChangeEvent',
        'passcode_change_event' => 'passcodeChangeEvent',
        'phone_number_verification_event' => 'phoneNumberVerificationEvent',
        'customer_otp_event' => 'customerOtpEvent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'phone_number' => 'setPhoneNumber',
        'type' => 'setType',
        'idempotency_key' => 'setIdempotencyKey',
        'customer_hay_id' => 'setCustomerHayId',
        'card_status_change_event' => 'setCardStatusChangeEvent',
        'account_status_change_event' => 'setAccountStatusChangeEvent',
        'passcode_change_event' => 'setPasscodeChangeEvent',
        'phone_number_verification_event' => 'setPhoneNumberVerificationEvent',
        'customer_otp_event' => 'setCustomerOtpEvent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'phone_number' => 'getPhoneNumber',
        'type' => 'getType',
        'idempotency_key' => 'getIdempotencyKey',
        'customer_hay_id' => 'getCustomerHayId',
        'card_status_change_event' => 'getCardStatusChangeEvent',
        'account_status_change_event' => 'getAccountStatusChangeEvent',
        'passcode_change_event' => 'getPasscodeChangeEvent',
        'phone_number_verification_event' => 'getPhoneNumberVerificationEvent',
        'customer_otp_event' => 'getCustomerOtpEvent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ACCOUNT_STATUS_CHANGE = 'ACCOUNT_STATUS_CHANGE';
    public const TYPE_CARD_ADDED_TO_WALLET = 'CARD_ADDED_TO_WALLET';
    public const TYPE_OTP = 'OTP';
    public const TYPE_PASSCODE_CHANGE = 'PASSCODE_CHANGE';
    public const TYPE_PHONE_NUMBER_VERIFICATION = 'PHONE_NUMBER_VERIFICATION';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACCOUNT_STATUS_CHANGE,
            self::TYPE_CARD_ADDED_TO_WALLET,
            self::TYPE_OTP,
            self::TYPE_PASSCODE_CHANGE,
            self::TYPE_PHONE_NUMBER_VERIFICATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('card_status_change_event', $data ?? [], null);
        $this->setIfExists('account_status_change_event', $data ?? [], null);
        $this->setIfExists('passcode_change_event', $data ?? [], null);
        $this->setIfExists('phone_number_verification_event', $data ?? [], null);
        $this->setIfExists('customer_otp_event', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone_number
     *
     * @return \OpenAPI\Client\Model\PhoneNumber
     */
    public function getPhoneNumber(): \OpenAPI\Client\Model\PhoneNumber
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param \OpenAPI\Client\Model\PhoneNumber $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber(\OpenAPI\Client\Model\PhoneNumber $phone_number): static
    {
        if (is_null($phone_number)) {
            throw new InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the notification event - one of:  * **ACCOUNT_STATUS_CHANGE**: The status of an account has changed  * **CARD_ADDED_TO_WALLET**: Card has been added to a device wallet  * **OTP**: One-time password has been requested  * **PASSCODE_CHANGE**: Customer's passcode has been changed  * **PHONE_NUMBER_VERIFICATION**: Phone number verification has been requested
     *
     * @return $this
     */
    public function setType(string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey(): string
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Idempotency key (UUID) to uniquely represent this request and prevent duplication.
     *
     * @return $this
     */
    public function setIdempotencyKey(string $idempotency_key): static
    {
        if (is_null($idempotency_key)) {
            throw new InvalidArgumentException('non-nullable idempotency_key cannot be null');
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets customer_hay_id
     *
     * @return string|null
     */
    public function getCustomerHayId(): ?string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string|null $customer_hay_id Unique identifier (UUID) of the Customer associated with the event
     *
     * @return $this
     */
    public function setCustomerHayId(?string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets card_status_change_event
     *
     * @return \OpenAPI\Client\Model\CardStatusChangeEventDto|null
     */
    public function getCardStatusChangeEvent(): ?\OpenAPI\Client\Model\CardStatusChangeEventDto
    {
        return $this->container['card_status_change_event'];
    }

    /**
     * Sets card_status_change_event
     *
     * @param \OpenAPI\Client\Model\CardStatusChangeEventDto|null $card_status_change_event card_status_change_event
     *
     * @return $this
     */
    public function setCardStatusChangeEvent(?\OpenAPI\Client\Model\CardStatusChangeEventDto $card_status_change_event): static
    {
        if (is_null($card_status_change_event)) {
            throw new InvalidArgumentException('non-nullable card_status_change_event cannot be null');
        }
        $this->container['card_status_change_event'] = $card_status_change_event;

        return $this;
    }

    /**
     * Gets account_status_change_event
     *
     * @return \OpenAPI\Client\Model\AccountStatusChangeEventDto|null
     */
    public function getAccountStatusChangeEvent(): ?\OpenAPI\Client\Model\AccountStatusChangeEventDto
    {
        return $this->container['account_status_change_event'];
    }

    /**
     * Sets account_status_change_event
     *
     * @param \OpenAPI\Client\Model\AccountStatusChangeEventDto|null $account_status_change_event account_status_change_event
     *
     * @return $this
     */
    public function setAccountStatusChangeEvent(?\OpenAPI\Client\Model\AccountStatusChangeEventDto $account_status_change_event): static
    {
        if (is_null($account_status_change_event)) {
            throw new InvalidArgumentException('non-nullable account_status_change_event cannot be null');
        }
        $this->container['account_status_change_event'] = $account_status_change_event;

        return $this;
    }

    /**
     * Gets passcode_change_event
     *
     * @return \OpenAPI\Client\Model\PasscodeChangeEventDto|null
     */
    public function getPasscodeChangeEvent(): ?\OpenAPI\Client\Model\PasscodeChangeEventDto
    {
        return $this->container['passcode_change_event'];
    }

    /**
     * Sets passcode_change_event
     *
     * @param \OpenAPI\Client\Model\PasscodeChangeEventDto|null $passcode_change_event passcode_change_event
     *
     * @return $this
     */
    public function setPasscodeChangeEvent(?\OpenAPI\Client\Model\PasscodeChangeEventDto $passcode_change_event): static
    {
        if (is_null($passcode_change_event)) {
            throw new InvalidArgumentException('non-nullable passcode_change_event cannot be null');
        }
        $this->container['passcode_change_event'] = $passcode_change_event;

        return $this;
    }

    /**
     * Gets phone_number_verification_event
     *
     * @return \OpenAPI\Client\Model\PhoneNumberVerificationEventDto|null
     */
    public function getPhoneNumberVerificationEvent(): ?\OpenAPI\Client\Model\PhoneNumberVerificationEventDto
    {
        return $this->container['phone_number_verification_event'];
    }

    /**
     * Sets phone_number_verification_event
     *
     * @param \OpenAPI\Client\Model\PhoneNumberVerificationEventDto|null $phone_number_verification_event phone_number_verification_event
     *
     * @return $this
     */
    public function setPhoneNumberVerificationEvent(?\OpenAPI\Client\Model\PhoneNumberVerificationEventDto $phone_number_verification_event): static
    {
        if (is_null($phone_number_verification_event)) {
            throw new InvalidArgumentException('non-nullable phone_number_verification_event cannot be null');
        }
        $this->container['phone_number_verification_event'] = $phone_number_verification_event;

        return $this;
    }

    /**
     * Gets customer_otp_event
     *
     * @return \OpenAPI\Client\Model\CustomerOtpEventDto|null
     */
    public function getCustomerOtpEvent(): ?\OpenAPI\Client\Model\CustomerOtpEventDto
    {
        return $this->container['customer_otp_event'];
    }

    /**
     * Sets customer_otp_event
     *
     * @param \OpenAPI\Client\Model\CustomerOtpEventDto|null $customer_otp_event customer_otp_event
     *
     * @return $this
     */
    public function setCustomerOtpEvent(?\OpenAPI\Client\Model\CustomerOtpEventDto $customer_otp_event): static
    {
        if (is_null($customer_otp_event)) {
            throw new InvalidArgumentException('non-nullable customer_otp_event cannot be null');
        }
        $this->container['customer_otp_event'] = $customer_otp_event;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


