<?php
/**
 * MandateEventDto
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification Webhooks
 *
 * Definition of the webhooks API for client callbacks
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * MandateEventDto Class Doc Comment
 *
 * @description Details of the **Mandate** event; provided when the type is &#x60;MANDATE&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MandateEventDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MandateEventDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'mandate_id' => 'string',
        'action_id' => 'string',
        'description' => 'string',
        'trigger' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'mandate_id' => 'uuid',
        'action_id' => 'uuid',
        'description' => null,
        'trigger' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'mandate_id' => false,
        'action_id' => false,
        'description' => false,
        'trigger' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'mandate_id' => 'mandateId',
        'action_id' => 'actionId',
        'description' => 'description',
        'trigger' => 'trigger'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'mandate_id' => 'setMandateId',
        'action_id' => 'setActionId',
        'description' => 'setDescription',
        'trigger' => 'setTrigger'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'mandate_id' => 'getMandateId',
        'action_id' => 'getActionId',
        'description' => 'getDescription',
        'trigger' => 'getTrigger'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TRIGGER_MAMN = 'MAMN';
    public const TRIGGER_MAMP = 'MAMP';
    public const TRIGGER_MAMR = 'MAMR';
    public const TRIGGER_MAMX = 'MAMX';
    public const TRIGGER_MCRP = 'MCRP';
    public const TRIGGER_MCRR = 'MCRR';
    public const TRIGGER_MCRT = 'MCRT';
    public const TRIGGER_MCRX = 'MCRX';
    public const TRIGGER_MPOF = 'MPOF';
    public const TRIGGER_MPOT = 'MPOT';
    public const TRIGGER_MPOX = 'MPOX';
    public const TRIGGER_MSCH = 'MSCH';
    public const TRIGGER_CSCH = 'CSCH';
    public const TRIGGER_PAMC = 'PAMC';
    public const TRIGGER_PAMD = 'PAMD';
    public const TRIGGER_PAMN = 'PAMN';
    public const TRIGGER_PCRC = 'PCRC';
    public const TRIGGER_PCRD = 'PCRD';
    public const TRIGGER_PPOT = 'PPOT';
    public const TRIGGER_PSCH = 'PSCH';
    public const TRIGGER_PPOI = 'PPOI';
    public const TRIGGER_PPOR = 'PPOR';
    public const TRIGGER_MCRC = 'MCRC';
    public const TRIGGER_MCRD = 'MCRD';
    public const TRIGGER_MAMC = 'MAMC';
    public const TRIGGER_MAMD = 'MAMD';
    public const TRIGGER_CCRR = 'CCRR';
    public const TRIGGER_IAMN = 'IAMN';
    public const TRIGGER_ISCH = 'ISCH';
    public const TRIGGER_IAMP = 'IAMP';
    public const TRIGGER_IAMR = 'IAMR';
    public const TRIGGER_ICRR = 'ICRR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTriggerAllowableValues()
    {
        return [
            self::TRIGGER_MAMN,
            self::TRIGGER_MAMP,
            self::TRIGGER_MAMR,
            self::TRIGGER_MAMX,
            self::TRIGGER_MCRP,
            self::TRIGGER_MCRR,
            self::TRIGGER_MCRT,
            self::TRIGGER_MCRX,
            self::TRIGGER_MPOF,
            self::TRIGGER_MPOT,
            self::TRIGGER_MPOX,
            self::TRIGGER_MSCH,
            self::TRIGGER_CSCH,
            self::TRIGGER_PAMC,
            self::TRIGGER_PAMD,
            self::TRIGGER_PAMN,
            self::TRIGGER_PCRC,
            self::TRIGGER_PCRD,
            self::TRIGGER_PPOT,
            self::TRIGGER_PSCH,
            self::TRIGGER_PPOI,
            self::TRIGGER_PPOR,
            self::TRIGGER_MCRC,
            self::TRIGGER_MCRD,
            self::TRIGGER_MAMC,
            self::TRIGGER_MAMD,
            self::TRIGGER_CCRR,
            self::TRIGGER_IAMN,
            self::TRIGGER_ISCH,
            self::TRIGGER_IAMP,
            self::TRIGGER_IAMR,
            self::TRIGGER_ICRR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mandate_id', $data ?? [], null);
        $this->setIfExists('action_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('trigger', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTriggerAllowableValues();
        if (!is_null($this->container['trigger']) && !in_array($this->container['trigger'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'trigger', must be one of '%s'",
                $this->container['trigger'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mandate_id
     *
     * @return string|null
     */
    public function getMandateId(): ?string
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string|null $mandate_id Mandate identifier
     *
     * @return $this
     */
    public function setMandateId(?string $mandate_id): static
    {
        if (is_null($mandate_id)) {
            throw new InvalidArgumentException('non-nullable mandate_id cannot be null');
        }
        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets action_id
     *
     * @return string|null
     */
    public function getActionId(): ?string
    {
        return $this->container['action_id'];
    }

    /**
     * Sets action_id
     *
     * @param string|null $action_id Action identifier
     *
     * @return $this
     */
    public function setActionId(?string $action_id): static
    {
        if (is_null($action_id)) {
            throw new InvalidArgumentException('non-nullable action_id cannot be null');
        }
        $this->container['action_id'] = $action_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Event description
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets trigger
     *
     * @return string|null
     */
    public function getTrigger(): ?string
    {
        return $this->container['trigger'];
    }

    /**
     * Sets trigger
     *
     * @param string|null $trigger Event trigger * **CCRR**: Cuscal mandate create recalled * **CSCH**: Cuscal mandate status changed * **IAMN**: Initiator mandate amended * **IAMP**: Initiator mandate amend proposed * **IAMR**: Initiator mandate amend recalled * **ICRR**: Initiator mandate create recalled * **ISCH**: Initiator mandate status changed * **MAMC**: Mandate amend confirmed * **MAMD**: Mandate amend declined * **MAMN**: Mandate amended * **MAMP**: Mandate amend proposed * **MAMR**: Mandate amend recalled * **MAMX**: Mandate amend expired * **MCRC**: Mandate create confirmed * **MCRD**: Mandate create declined * **MCRP**: Mandate create proposed * **MCRR**: Mandate create recalled * **MCRT**: Mandate created * **MCRX**: Mandate create expired * **MPOF**: Mandate port finalised * **MPOT**: Mandate ported * **MPOX**: Mandate port expired * **MSCH**: Mandate status changed * **PAMC**: Payer mandate amend confirmed * **PAMD**: Payer mandate amend declined * **PAMN**: Payer mandate amended * **PCRC**: Payer mandate create confirmed * **PCRD**: Payer mandate create declined * **PPOI**: Payer mandate port initiated * **PPOR**: Payer mandate port recalled * **PPOT**: Payer mandate ported * **PSCH**: Payer mandate status changed
     *
     * @return $this
     */
    public function setTrigger(?string $trigger): static
    {
        if (is_null($trigger)) {
            throw new InvalidArgumentException('non-nullable trigger cannot be null');
        }
        $allowedValues = $this->getTriggerAllowableValues();
        if (!in_array($trigger, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'trigger', must be one of '%s'",
                    $trigger,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trigger'] = $trigger;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


