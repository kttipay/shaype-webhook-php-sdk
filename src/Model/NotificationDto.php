<?php
/**
 * NotificationDto
 *
 * PHP version 8.1
 *
 * @package  Shaype\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Notification Webhooks
 *
 * Definition of the webhooks API for client callbacks
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shaype\Webhook\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Shaype\Webhook\ObjectSerializer;

/**
 * NotificationDto Class Doc Comment
 *
 * @description Details of event the notification
 * @package  Shaype\Webhook
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class NotificationDto implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'NotificationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'customer_hay_id' => 'string',
        'idempotency_key' => 'string',
        'type' => 'string',
        'firebase_device_token' => 'string',
        'action_owner' => 'string',
        'card_hay_id' => 'string',
        'product_id' => 'string',
        'account_status_change_event' => '\Shaype\Webhook\Model\AccountStatusChangeEventDto',
        'customer_status_updated_event' => '\Shaype\Webhook\Model\CustomerStatusUpdatedEventDto',
        'transaction_event' => '\Shaype\Webhook\Model\TransactionEventDto',
        'card_status_change_event' => '\Shaype\Webhook\Model\CardStatusChangeEventDto',
        'customer_details_change_event' => '\Shaype\Webhook\Model\CustomerDetailsChangeEventDto',
        'card_addition_to_wallet_event' => '\Shaype\Webhook\Model\CardAdditionToWalletEventDto',
        'reminder_type' => 'string',
        'scheduled_payment_event' => '\Shaype\Webhook\Model\ScheduledPaymentEventDto',
        'onboarding_failed_event' => '\Shaype\Webhook\Model\OnboardingFailedEventDto',
        'direct_entry_event' => '\Shaype\Webhook\Model\DirectEntryEventDto',
        'mandate_due_payment_event_dto' => '\Shaype\Webhook\Model\MandateDuePaymentEventDto',
        'mandate_event_dto' => '\Shaype\Webhook\Model\MandateEventDto',
        'mandate_payment_event_dto' => '\Shaype\Webhook\Model\MandatePaymentEventDto',
        'apple_pay_reward_for_customer_event' => '\Shaype\Webhook\Model\ApplePayRewardForCustomerEventDto',
        'card_expiry_reminder_event' => '\Shaype\Webhook\Model\CardExpiryReminderEventDto',
        'mandate_action_expiration_event' => '\Shaype\Webhook\Model\MandateActionExpirationEventDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'customer_hay_id' => 'uuid',
        'idempotency_key' => 'uuid',
        'type' => null,
        'firebase_device_token' => null,
        'action_owner' => null,
        'card_hay_id' => 'uuid',
        'product_id' => 'uuid',
        'account_status_change_event' => null,
        'customer_status_updated_event' => null,
        'transaction_event' => null,
        'card_status_change_event' => null,
        'customer_details_change_event' => null,
        'card_addition_to_wallet_event' => null,
        'reminder_type' => null,
        'scheduled_payment_event' => null,
        'onboarding_failed_event' => null,
        'direct_entry_event' => null,
        'mandate_due_payment_event_dto' => null,
        'mandate_event_dto' => null,
        'mandate_payment_event_dto' => null,
        'apple_pay_reward_for_customer_event' => null,
        'card_expiry_reminder_event' => null,
        'mandate_action_expiration_event' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'customer_hay_id' => false,
        'idempotency_key' => false,
        'type' => false,
        'firebase_device_token' => false,
        'action_owner' => false,
        'card_hay_id' => false,
        'product_id' => false,
        'account_status_change_event' => false,
        'customer_status_updated_event' => false,
        'transaction_event' => false,
        'card_status_change_event' => false,
        'customer_details_change_event' => false,
        'card_addition_to_wallet_event' => false,
        'reminder_type' => false,
        'scheduled_payment_event' => false,
        'onboarding_failed_event' => false,
        'direct_entry_event' => false,
        'mandate_due_payment_event_dto' => false,
        'mandate_event_dto' => false,
        'mandate_payment_event_dto' => false,
        'apple_pay_reward_for_customer_event' => false,
        'card_expiry_reminder_event' => false,
        'mandate_action_expiration_event' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'customer_hay_id' => 'customerHayId',
        'idempotency_key' => 'idempotencyKey',
        'type' => 'type',
        'firebase_device_token' => 'firebaseDeviceToken',
        'action_owner' => 'actionOwner',
        'card_hay_id' => 'cardHayId',
        'product_id' => 'productId',
        'account_status_change_event' => 'accountStatusChangeEvent',
        'customer_status_updated_event' => 'customerStatusUpdatedEvent',
        'transaction_event' => 'transactionEvent',
        'card_status_change_event' => 'cardStatusChangeEvent',
        'customer_details_change_event' => 'customerDetailsChangeEvent',
        'card_addition_to_wallet_event' => 'cardAdditionToWalletEvent',
        'reminder_type' => 'reminderType',
        'scheduled_payment_event' => 'scheduledPaymentEvent',
        'onboarding_failed_event' => 'onboardingFailedEvent',
        'direct_entry_event' => 'directEntryEvent',
        'mandate_due_payment_event_dto' => 'mandateDuePaymentEventDto',
        'mandate_event_dto' => 'mandateEventDto',
        'mandate_payment_event_dto' => 'mandatePaymentEventDto',
        'apple_pay_reward_for_customer_event' => 'applePayRewardForCustomerEvent',
        'card_expiry_reminder_event' => 'cardExpiryReminderEvent',
        'mandate_action_expiration_event' => 'mandateActionExpirationEvent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'customer_hay_id' => 'setCustomerHayId',
        'idempotency_key' => 'setIdempotencyKey',
        'type' => 'setType',
        'firebase_device_token' => 'setFirebaseDeviceToken',
        'action_owner' => 'setActionOwner',
        'card_hay_id' => 'setCardHayId',
        'product_id' => 'setProductId',
        'account_status_change_event' => 'setAccountStatusChangeEvent',
        'customer_status_updated_event' => 'setCustomerStatusUpdatedEvent',
        'transaction_event' => 'setTransactionEvent',
        'card_status_change_event' => 'setCardStatusChangeEvent',
        'customer_details_change_event' => 'setCustomerDetailsChangeEvent',
        'card_addition_to_wallet_event' => 'setCardAdditionToWalletEvent',
        'reminder_type' => 'setReminderType',
        'scheduled_payment_event' => 'setScheduledPaymentEvent',
        'onboarding_failed_event' => 'setOnboardingFailedEvent',
        'direct_entry_event' => 'setDirectEntryEvent',
        'mandate_due_payment_event_dto' => 'setMandateDuePaymentEventDto',
        'mandate_event_dto' => 'setMandateEventDto',
        'mandate_payment_event_dto' => 'setMandatePaymentEventDto',
        'apple_pay_reward_for_customer_event' => 'setApplePayRewardForCustomerEvent',
        'card_expiry_reminder_event' => 'setCardExpiryReminderEvent',
        'mandate_action_expiration_event' => 'setMandateActionExpirationEvent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'customer_hay_id' => 'getCustomerHayId',
        'idempotency_key' => 'getIdempotencyKey',
        'type' => 'getType',
        'firebase_device_token' => 'getFirebaseDeviceToken',
        'action_owner' => 'getActionOwner',
        'card_hay_id' => 'getCardHayId',
        'product_id' => 'getProductId',
        'account_status_change_event' => 'getAccountStatusChangeEvent',
        'customer_status_updated_event' => 'getCustomerStatusUpdatedEvent',
        'transaction_event' => 'getTransactionEvent',
        'card_status_change_event' => 'getCardStatusChangeEvent',
        'customer_details_change_event' => 'getCustomerDetailsChangeEvent',
        'card_addition_to_wallet_event' => 'getCardAdditionToWalletEvent',
        'reminder_type' => 'getReminderType',
        'scheduled_payment_event' => 'getScheduledPaymentEvent',
        'onboarding_failed_event' => 'getOnboardingFailedEvent',
        'direct_entry_event' => 'getDirectEntryEvent',
        'mandate_due_payment_event_dto' => 'getMandateDuePaymentEventDto',
        'mandate_event_dto' => 'getMandateEventDto',
        'mandate_payment_event_dto' => 'getMandatePaymentEventDto',
        'apple_pay_reward_for_customer_event' => 'getApplePayRewardForCustomerEvent',
        'card_expiry_reminder_event' => 'getCardExpiryReminderEvent',
        'mandate_action_expiration_event' => 'getMandateActionExpirationEvent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ACCOUNT_STATUS_CHANGE = 'ACCOUNT_STATUS_CHANGE';
    public const TYPE_CUSTOMER_STATUS_UPDATED = 'CUSTOMER_STATUS_UPDATED';
    public const TYPE_CARD_ADDED_TO_WALLET = 'CARD_ADDED_TO_WALLET';
    public const TYPE_CARD_STATUS_CHANGE = 'CARD_STATUS_CHANGE';
    public const TYPE_CUSTOMER_DETAILS_CHANGE = 'CUSTOMER_DETAILS_CHANGE';
    public const TYPE_ONBOARDING_PASSED = 'ONBOARDING_PASSED';
    public const TYPE_ONBOARDING_FAILED = 'ONBOARDING_FAILED';
    public const TYPE_REMINDER = 'REMINDER';
    public const TYPE_SCHEDULED_PAYMENT = 'SCHEDULED_PAYMENT';
    public const TYPE_TRANSACTION = 'TRANSACTION';
    public const TYPE_DIRECT_ENTRY = 'DIRECT_ENTRY';
    public const TYPE_MANDATE = 'MANDATE';
    public const TYPE_MANDATE_DUE_PAYMENT = 'MANDATE_DUE_PAYMENT';
    public const TYPE_MANDATE_PAYMENT = 'MANDATE_PAYMENT';
    public const TYPE_APPLE_PAY_REWARD_FOR_CUSTOMER = 'APPLE_PAY_REWARD_FOR_CUSTOMER';
    public const TYPE_MANDATE_ACTION_EXPIRATION = 'MANDATE_ACTION_EXPIRATION';
    public const ACTION_OWNER_CLIENT = 'CLIENT';
    public const ACTION_OWNER_PLATFORM = 'PLATFORM';
    public const REMINDER_TYPE_REMINDER_TO_COMPLETE_FUNDING = 'REMINDER_TO_COMPLETE_FUNDING';
    public const REMINDER_TYPE_REMINDER_TO_PROVISION_DIGITAL_CARD = 'REMINDER_TO_PROVISION_DIGITAL_CARD';
    public const REMINDER_TYPE_REMINDER_TO_TRANSACT = 'REMINDER_TO_TRANSACT';
    public const REMINDER_TYPE_APPLE_PAY_REMINDER_24_HRS = 'APPLE_PAY_REMINDER_24_HRS';
    public const REMINDER_TYPE_APPLE_PAY_REMINDER_7_DAYS = 'APPLE_PAY_REMINDER_7_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_7_DAYS = 'APPLE_PAY_SPEND_REMINDER_7_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_14_DAYS = 'APPLE_PAY_SPEND_REMINDER_14_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_ADDITION_REWARD = 'APPLE_PAY_ADDITION_REWARD';
    public const REMINDER_TYPE_APPLE_PAY_SPEND_REWARD = 'APPLE_PAY_SPEND_REWARD';
    public const REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS = 'APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS = 'APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS';
    public const REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS = 'APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS';
    public const REMINDER_TYPE_GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING = 'GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING';
    public const REMINDER_TYPE_GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING = 'GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING';
    public const REMINDER_TYPE_GOOGLE_PAY_7_DAYS_SPEND_REMINDER = 'GOOGLE_PAY_7_DAYS_SPEND_REMINDER';
    public const REMINDER_TYPE_GOOGLE_PAY_14_DAYS_SPEND_REMINDER = 'GOOGLE_PAY_14_DAYS_SPEND_REMINDER';
    public const REMINDER_TYPE_CARD_EXPIRY_MONTH_REMINDER = 'CARD_EXPIRY_MONTH_REMINDER';
    public const REMINDER_TYPE_CARD_EXPIRY_2_WEEK_REMINDER = 'CARD_EXPIRY_2_WEEK_REMINDER';
    public const REMINDER_TYPE_CARD_EXPIRY_DAY_REMINDER = 'CARD_EXPIRY_DAY_REMINDER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACCOUNT_STATUS_CHANGE,
            self::TYPE_CUSTOMER_STATUS_UPDATED,
            self::TYPE_CARD_ADDED_TO_WALLET,
            self::TYPE_CARD_STATUS_CHANGE,
            self::TYPE_CUSTOMER_DETAILS_CHANGE,
            self::TYPE_ONBOARDING_PASSED,
            self::TYPE_ONBOARDING_FAILED,
            self::TYPE_REMINDER,
            self::TYPE_SCHEDULED_PAYMENT,
            self::TYPE_TRANSACTION,
            self::TYPE_DIRECT_ENTRY,
            self::TYPE_MANDATE,
            self::TYPE_MANDATE_DUE_PAYMENT,
            self::TYPE_MANDATE_PAYMENT,
            self::TYPE_APPLE_PAY_REWARD_FOR_CUSTOMER,
            self::TYPE_MANDATE_ACTION_EXPIRATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionOwnerAllowableValues()
    {
        return [
            self::ACTION_OWNER_CLIENT,
            self::ACTION_OWNER_PLATFORM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReminderTypeAllowableValues()
    {
        return [
            self::REMINDER_TYPE_REMINDER_TO_COMPLETE_FUNDING,
            self::REMINDER_TYPE_REMINDER_TO_PROVISION_DIGITAL_CARD,
            self::REMINDER_TYPE_REMINDER_TO_TRANSACT,
            self::REMINDER_TYPE_APPLE_PAY_REMINDER_24_HRS,
            self::REMINDER_TYPE_APPLE_PAY_REMINDER_7_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_7_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_SPEND_REMINDER_14_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_ADDITION_REWARD,
            self::REMINDER_TYPE_APPLE_PAY_SPEND_REWARD,
            self::REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS,
            self::REMINDER_TYPE_APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS,
            self::REMINDER_TYPE_GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING,
            self::REMINDER_TYPE_GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING,
            self::REMINDER_TYPE_GOOGLE_PAY_7_DAYS_SPEND_REMINDER,
            self::REMINDER_TYPE_GOOGLE_PAY_14_DAYS_SPEND_REMINDER,
            self::REMINDER_TYPE_CARD_EXPIRY_MONTH_REMINDER,
            self::REMINDER_TYPE_CARD_EXPIRY_2_WEEK_REMINDER,
            self::REMINDER_TYPE_CARD_EXPIRY_DAY_REMINDER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer_hay_id', $data ?? [], null);
        $this->setIfExists('idempotency_key', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('firebase_device_token', $data ?? [], null);
        $this->setIfExists('action_owner', $data ?? [], null);
        $this->setIfExists('card_hay_id', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('account_status_change_event', $data ?? [], null);
        $this->setIfExists('customer_status_updated_event', $data ?? [], null);
        $this->setIfExists('transaction_event', $data ?? [], null);
        $this->setIfExists('card_status_change_event', $data ?? [], null);
        $this->setIfExists('customer_details_change_event', $data ?? [], null);
        $this->setIfExists('card_addition_to_wallet_event', $data ?? [], null);
        $this->setIfExists('reminder_type', $data ?? [], null);
        $this->setIfExists('scheduled_payment_event', $data ?? [], null);
        $this->setIfExists('onboarding_failed_event', $data ?? [], null);
        $this->setIfExists('direct_entry_event', $data ?? [], null);
        $this->setIfExists('mandate_due_payment_event_dto', $data ?? [], null);
        $this->setIfExists('mandate_event_dto', $data ?? [], null);
        $this->setIfExists('mandate_payment_event_dto', $data ?? [], null);
        $this->setIfExists('apple_pay_reward_for_customer_event', $data ?? [], null);
        $this->setIfExists('card_expiry_reminder_event', $data ?? [], null);
        $this->setIfExists('mandate_action_expiration_event', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['customer_hay_id'] === null) {
            $invalidProperties[] = "'customer_hay_id' can't be null";
        }
        if ($this->container['idempotency_key'] === null) {
            $invalidProperties[] = "'idempotency_key' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionOwnerAllowableValues();
        if (!is_null($this->container['action_owner']) && !in_array($this->container['action_owner'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action_owner', must be one of '%s'",
                $this->container['action_owner'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReminderTypeAllowableValues();
        if (!is_null($this->container['reminder_type']) && !in_array($this->container['reminder_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reminder_type', must be one of '%s'",
                $this->container['reminder_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_hay_id
     *
     * @return string
     */
    public function getCustomerHayId(): string
    {
        return $this->container['customer_hay_id'];
    }

    /**
     * Sets customer_hay_id
     *
     * @param string $customer_hay_id Unique identifier (UUID) of the customer associated with the notification
     *
     * @return $this
     */
    public function setCustomerHayId(string $customer_hay_id): static
    {
        if (is_null($customer_hay_id)) {
            throw new InvalidArgumentException('non-nullable customer_hay_id cannot be null');
        }
        $this->container['customer_hay_id'] = $customer_hay_id;

        return $this;
    }

    /**
     * Gets idempotency_key
     *
     * @return string
     */
    public function getIdempotencyKey(): string
    {
        return $this->container['idempotency_key'];
    }

    /**
     * Sets idempotency_key
     *
     * @param string $idempotency_key Idempotency key (UUID) to uniquely represent this request and prevent duplication.
     *
     * @return $this
     */
    public function setIdempotencyKey(string $idempotency_key): static
    {
        if (is_null($idempotency_key)) {
            throw new InvalidArgumentException('non-nullable idempotency_key cannot be null');
        }
        $this->container['idempotency_key'] = $idempotency_key;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType(): string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the notification event - one of:  * **ACCOUNT_STATUS_CHANGE**: The status of an account has changed  * **APPLE_PAY_REWARD_FOR_CUSTOMER**: Apple Pay reward reminder  * **CARD_ADDED_TO_WALLET**: Card has been added to a device wallet  * **CARD_STATUS_CHANGE**: The status of a card has changed  * **CUSTOMER_DETAILS_CHANGE**: Customer's personal details have been updated  * **CUSTOMER_STATUS_UPDATED**: Customer's status has been updated  * **ONBOARDING_PASSED**: Customer onboarding completed successfully  * **ONBOARDING_FAILED**: Customer onboarding failed  * **REMINDER**: A reminder  * **SCHEDULED_PAYMENT**: Scheduled payment creation notification  * **TRANSACTION**: Transaction notification  * **DIRECT_ENTRY**: Direct Entry notification  * **MANDATE**: Mandate notification  * **MANDATE_DUE_PAYMENT**: Mandate due payment notification  * **MANDATE_PAYMENT**: Mandate payment notification  * **MANDATE_ACTION_EXPIRATION**: Mandate action expiration notification
     *
     * @return $this
     */
    public function setType(string $type): static
    {
        if (is_null($type)) {
            throw new InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets firebase_device_token
     *
     * @return string|null
     */
    public function getFirebaseDeviceToken(): ?string
    {
        return $this->container['firebase_device_token'];
    }

    /**
     * Sets firebase_device_token
     *
     * @param string|null $firebase_device_token Firebase token of the customer's device
     *
     * @return $this
     */
    public function setFirebaseDeviceToken(?string $firebase_device_token): static
    {
        if (is_null($firebase_device_token)) {
            throw new InvalidArgumentException('non-nullable firebase_device_token cannot be null');
        }
        $this->container['firebase_device_token'] = $firebase_device_token;

        return $this;
    }

    /**
     * Gets action_owner
     *
     * @return string|null
     */
    public function getActionOwner(): ?string
    {
        return $this->container['action_owner'];
    }

    /**
     * Sets action_owner
     *
     * @param string|null $action_owner The party responsible for the triggering of an action resulting in a notification event. Possible values:  * **CLIENT**: Client executed an action which triggered the event.  * **PLATFORM**: Shaype executed an action which triggered the event.
     *
     * @return $this
     */
    public function setActionOwner(?string $action_owner): static
    {
        if (is_null($action_owner)) {
            throw new InvalidArgumentException('non-nullable action_owner cannot be null');
        }
        $allowedValues = $this->getActionOwnerAllowableValues();
        if (!in_array($action_owner, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action_owner', must be one of '%s'",
                    $action_owner,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action_owner'] = $action_owner;

        return $this;
    }

    /**
     * Gets card_hay_id
     *
     * @return string|null
     */
    public function getCardHayId(): ?string
    {
        return $this->container['card_hay_id'];
    }

    /**
     * Sets card_hay_id
     *
     * @param string|null $card_hay_id Unique identifier (UUID) of the Card associated with the event
     *
     * @return $this
     */
    public function setCardHayId(?string $card_hay_id): static
    {
        if (is_null($card_hay_id)) {
            throw new InvalidArgumentException('non-nullable card_hay_id cannot be null');
        }
        $this->container['card_hay_id'] = $card_hay_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId(): ?string
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id Unique identifier (UUID) of the Product of the account associated with the event
     *
     * @return $this
     */
    public function setProductId(?string $product_id): static
    {
        if (is_null($product_id)) {
            throw new InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets account_status_change_event
     *
     * @return \Shaype\Webhook\Model\AccountStatusChangeEventDto|null
     */
    public function getAccountStatusChangeEvent(): ?\Shaype\Webhook\Model\AccountStatusChangeEventDto
    {
        return $this->container['account_status_change_event'];
    }

    /**
     * Sets account_status_change_event
     *
     * @param \Shaype\Webhook\Model\AccountStatusChangeEventDto|null $account_status_change_event account_status_change_event
     *
     * @return $this
     */
    public function setAccountStatusChangeEvent(?\Shaype\Webhook\Model\AccountStatusChangeEventDto $account_status_change_event): static
    {
        if (is_null($account_status_change_event)) {
            throw new InvalidArgumentException('non-nullable account_status_change_event cannot be null');
        }
        $this->container['account_status_change_event'] = $account_status_change_event;

        return $this;
    }

    /**
     * Gets customer_status_updated_event
     *
     * @return \Shaype\Webhook\Model\CustomerStatusUpdatedEventDto|null
     */
    public function getCustomerStatusUpdatedEvent(): ?\Shaype\Webhook\Model\CustomerStatusUpdatedEventDto
    {
        return $this->container['customer_status_updated_event'];
    }

    /**
     * Sets customer_status_updated_event
     *
     * @param \Shaype\Webhook\Model\CustomerStatusUpdatedEventDto|null $customer_status_updated_event customer_status_updated_event
     *
     * @return $this
     */
    public function setCustomerStatusUpdatedEvent(?\Shaype\Webhook\Model\CustomerStatusUpdatedEventDto $customer_status_updated_event): static
    {
        if (is_null($customer_status_updated_event)) {
            throw new InvalidArgumentException('non-nullable customer_status_updated_event cannot be null');
        }
        $this->container['customer_status_updated_event'] = $customer_status_updated_event;

        return $this;
    }

    /**
     * Gets transaction_event
     *
     * @return \Shaype\Webhook\Model\TransactionEventDto|null
     */
    public function getTransactionEvent(): ?\Shaype\Webhook\Model\TransactionEventDto
    {
        return $this->container['transaction_event'];
    }

    /**
     * Sets transaction_event
     *
     * @param \Shaype\Webhook\Model\TransactionEventDto|null $transaction_event transaction_event
     *
     * @return $this
     */
    public function setTransactionEvent(?\Shaype\Webhook\Model\TransactionEventDto $transaction_event): static
    {
        if (is_null($transaction_event)) {
            throw new InvalidArgumentException('non-nullable transaction_event cannot be null');
        }
        $this->container['transaction_event'] = $transaction_event;

        return $this;
    }

    /**
     * Gets card_status_change_event
     *
     * @return \Shaype\Webhook\Model\CardStatusChangeEventDto|null
     */
    public function getCardStatusChangeEvent(): ?\Shaype\Webhook\Model\CardStatusChangeEventDto
    {
        return $this->container['card_status_change_event'];
    }

    /**
     * Sets card_status_change_event
     *
     * @param \Shaype\Webhook\Model\CardStatusChangeEventDto|null $card_status_change_event card_status_change_event
     *
     * @return $this
     */
    public function setCardStatusChangeEvent(?\Shaype\Webhook\Model\CardStatusChangeEventDto $card_status_change_event): static
    {
        if (is_null($card_status_change_event)) {
            throw new InvalidArgumentException('non-nullable card_status_change_event cannot be null');
        }
        $this->container['card_status_change_event'] = $card_status_change_event;

        return $this;
    }

    /**
     * Gets customer_details_change_event
     *
     * @return \Shaype\Webhook\Model\CustomerDetailsChangeEventDto|null
     */
    public function getCustomerDetailsChangeEvent(): ?\Shaype\Webhook\Model\CustomerDetailsChangeEventDto
    {
        return $this->container['customer_details_change_event'];
    }

    /**
     * Sets customer_details_change_event
     *
     * @param \Shaype\Webhook\Model\CustomerDetailsChangeEventDto|null $customer_details_change_event customer_details_change_event
     *
     * @return $this
     */
    public function setCustomerDetailsChangeEvent(?\Shaype\Webhook\Model\CustomerDetailsChangeEventDto $customer_details_change_event): static
    {
        if (is_null($customer_details_change_event)) {
            throw new InvalidArgumentException('non-nullable customer_details_change_event cannot be null');
        }
        $this->container['customer_details_change_event'] = $customer_details_change_event;

        return $this;
    }

    /**
     * Gets card_addition_to_wallet_event
     *
     * @return \Shaype\Webhook\Model\CardAdditionToWalletEventDto|null
     */
    public function getCardAdditionToWalletEvent(): ?\Shaype\Webhook\Model\CardAdditionToWalletEventDto
    {
        return $this->container['card_addition_to_wallet_event'];
    }

    /**
     * Sets card_addition_to_wallet_event
     *
     * @param \Shaype\Webhook\Model\CardAdditionToWalletEventDto|null $card_addition_to_wallet_event card_addition_to_wallet_event
     *
     * @return $this
     */
    public function setCardAdditionToWalletEvent(?\Shaype\Webhook\Model\CardAdditionToWalletEventDto $card_addition_to_wallet_event): static
    {
        if (is_null($card_addition_to_wallet_event)) {
            throw new InvalidArgumentException('non-nullable card_addition_to_wallet_event cannot be null');
        }
        $this->container['card_addition_to_wallet_event'] = $card_addition_to_wallet_event;

        return $this;
    }

    /**
     * Gets reminder_type
     *
     * @return string|null
     */
    public function getReminderType(): ?string
    {
        return $this->container['reminder_type'];
    }

    /**
     * Sets reminder_type
     *
     * @param string|null $reminder_type Type of the **Reminder** event; provided when the type is `REMINDER`. Possible values:  * **REMINDER_TO_COMPLETE_FUNDING**  * **REMINDER_TO_PROVISION_DIGITAL_CARD**  * **REMINDER_TO_TRANSACT**  * **APPLE_PAY_REMINDER_24_HRS**  * **APPLE_PAY_REMINDER_7_DAYS**  * **APPLE_PAY_SPEND_REMINDER_7_DAYS**  * **APPLE_PAY_SPEND_REMINDER_14_DAYS**  * **APPLE_PAY_ADD_TO_WALLET_REMINDER_30_DAYS**  * **APPLE_PAY_ADD_TO_WALLET_REMINDER_60_DAYS**  * **APPLE_PAY_ADD_TO_WALLET_REMINDER_90_DAYS**  * **GOOGLE_PAY_24_HRS_PARTIAL_PROVISIONING**  * **GOOGLE_PAY_7_DAYS_PARTIAL_PROVISIONING**  * **GOOGLE_PAY_7_DAYS_SPEND_REMINDER**  * **GOOGLE_PAY_14_DAYS_SPEND_REMINDER**  * **CARD_EXPIRY_MONTH_REMINDER**  * **CARD_EXPIRY_2_WEEK_REMINDER**  * **CARD_EXPIRY_DAY_REMINDER**
     *
     * @return $this
     */
    public function setReminderType(?string $reminder_type): static
    {
        if (is_null($reminder_type)) {
            throw new InvalidArgumentException('non-nullable reminder_type cannot be null');
        }
        $allowedValues = $this->getReminderTypeAllowableValues();
        if (!in_array($reminder_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reminder_type', must be one of '%s'",
                    $reminder_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reminder_type'] = $reminder_type;

        return $this;
    }

    /**
     * Gets scheduled_payment_event
     *
     * @return \Shaype\Webhook\Model\ScheduledPaymentEventDto|null
     */
    public function getScheduledPaymentEvent(): ?\Shaype\Webhook\Model\ScheduledPaymentEventDto
    {
        return $this->container['scheduled_payment_event'];
    }

    /**
     * Sets scheduled_payment_event
     *
     * @param \Shaype\Webhook\Model\ScheduledPaymentEventDto|null $scheduled_payment_event scheduled_payment_event
     *
     * @return $this
     */
    public function setScheduledPaymentEvent(?\Shaype\Webhook\Model\ScheduledPaymentEventDto $scheduled_payment_event): static
    {
        if (is_null($scheduled_payment_event)) {
            throw new InvalidArgumentException('non-nullable scheduled_payment_event cannot be null');
        }
        $this->container['scheduled_payment_event'] = $scheduled_payment_event;

        return $this;
    }

    /**
     * Gets onboarding_failed_event
     *
     * @return \Shaype\Webhook\Model\OnboardingFailedEventDto|null
     */
    public function getOnboardingFailedEvent(): ?\Shaype\Webhook\Model\OnboardingFailedEventDto
    {
        return $this->container['onboarding_failed_event'];
    }

    /**
     * Sets onboarding_failed_event
     *
     * @param \Shaype\Webhook\Model\OnboardingFailedEventDto|null $onboarding_failed_event onboarding_failed_event
     *
     * @return $this
     */
    public function setOnboardingFailedEvent(?\Shaype\Webhook\Model\OnboardingFailedEventDto $onboarding_failed_event): static
    {
        if (is_null($onboarding_failed_event)) {
            throw new InvalidArgumentException('non-nullable onboarding_failed_event cannot be null');
        }
        $this->container['onboarding_failed_event'] = $onboarding_failed_event;

        return $this;
    }

    /**
     * Gets direct_entry_event
     *
     * @return \Shaype\Webhook\Model\DirectEntryEventDto|null
     */
    public function getDirectEntryEvent(): ?\Shaype\Webhook\Model\DirectEntryEventDto
    {
        return $this->container['direct_entry_event'];
    }

    /**
     * Sets direct_entry_event
     *
     * @param \Shaype\Webhook\Model\DirectEntryEventDto|null $direct_entry_event direct_entry_event
     *
     * @return $this
     */
    public function setDirectEntryEvent(?\Shaype\Webhook\Model\DirectEntryEventDto $direct_entry_event): static
    {
        if (is_null($direct_entry_event)) {
            throw new InvalidArgumentException('non-nullable direct_entry_event cannot be null');
        }
        $this->container['direct_entry_event'] = $direct_entry_event;

        return $this;
    }

    /**
     * Gets mandate_due_payment_event_dto
     *
     * @return \Shaype\Webhook\Model\MandateDuePaymentEventDto|null
     */
    public function getMandateDuePaymentEventDto(): ?\Shaype\Webhook\Model\MandateDuePaymentEventDto
    {
        return $this->container['mandate_due_payment_event_dto'];
    }

    /**
     * Sets mandate_due_payment_event_dto
     *
     * @param \Shaype\Webhook\Model\MandateDuePaymentEventDto|null $mandate_due_payment_event_dto mandate_due_payment_event_dto
     *
     * @return $this
     */
    public function setMandateDuePaymentEventDto(?\Shaype\Webhook\Model\MandateDuePaymentEventDto $mandate_due_payment_event_dto): static
    {
        if (is_null($mandate_due_payment_event_dto)) {
            throw new InvalidArgumentException('non-nullable mandate_due_payment_event_dto cannot be null');
        }
        $this->container['mandate_due_payment_event_dto'] = $mandate_due_payment_event_dto;

        return $this;
    }

    /**
     * Gets mandate_event_dto
     *
     * @return \Shaype\Webhook\Model\MandateEventDto|null
     */
    public function getMandateEventDto(): ?\Shaype\Webhook\Model\MandateEventDto
    {
        return $this->container['mandate_event_dto'];
    }

    /**
     * Sets mandate_event_dto
     *
     * @param \Shaype\Webhook\Model\MandateEventDto|null $mandate_event_dto mandate_event_dto
     *
     * @return $this
     */
    public function setMandateEventDto(?\Shaype\Webhook\Model\MandateEventDto $mandate_event_dto): static
    {
        if (is_null($mandate_event_dto)) {
            throw new InvalidArgumentException('non-nullable mandate_event_dto cannot be null');
        }
        $this->container['mandate_event_dto'] = $mandate_event_dto;

        return $this;
    }

    /**
     * Gets mandate_payment_event_dto
     *
     * @return \Shaype\Webhook\Model\MandatePaymentEventDto|null
     */
    public function getMandatePaymentEventDto(): ?\Shaype\Webhook\Model\MandatePaymentEventDto
    {
        return $this->container['mandate_payment_event_dto'];
    }

    /**
     * Sets mandate_payment_event_dto
     *
     * @param \Shaype\Webhook\Model\MandatePaymentEventDto|null $mandate_payment_event_dto mandate_payment_event_dto
     *
     * @return $this
     */
    public function setMandatePaymentEventDto(?\Shaype\Webhook\Model\MandatePaymentEventDto $mandate_payment_event_dto): static
    {
        if (is_null($mandate_payment_event_dto)) {
            throw new InvalidArgumentException('non-nullable mandate_payment_event_dto cannot be null');
        }
        $this->container['mandate_payment_event_dto'] = $mandate_payment_event_dto;

        return $this;
    }

    /**
     * Gets apple_pay_reward_for_customer_event
     *
     * @return \Shaype\Webhook\Model\ApplePayRewardForCustomerEventDto|null
     */
    public function getApplePayRewardForCustomerEvent(): ?\Shaype\Webhook\Model\ApplePayRewardForCustomerEventDto
    {
        return $this->container['apple_pay_reward_for_customer_event'];
    }

    /**
     * Sets apple_pay_reward_for_customer_event
     *
     * @param \Shaype\Webhook\Model\ApplePayRewardForCustomerEventDto|null $apple_pay_reward_for_customer_event apple_pay_reward_for_customer_event
     *
     * @return $this
     */
    public function setApplePayRewardForCustomerEvent(?\Shaype\Webhook\Model\ApplePayRewardForCustomerEventDto $apple_pay_reward_for_customer_event): static
    {
        if (is_null($apple_pay_reward_for_customer_event)) {
            throw new InvalidArgumentException('non-nullable apple_pay_reward_for_customer_event cannot be null');
        }
        $this->container['apple_pay_reward_for_customer_event'] = $apple_pay_reward_for_customer_event;

        return $this;
    }

    /**
     * Gets card_expiry_reminder_event
     *
     * @return \Shaype\Webhook\Model\CardExpiryReminderEventDto|null
     */
    public function getCardExpiryReminderEvent(): ?\Shaype\Webhook\Model\CardExpiryReminderEventDto
    {
        return $this->container['card_expiry_reminder_event'];
    }

    /**
     * Sets card_expiry_reminder_event
     *
     * @param \Shaype\Webhook\Model\CardExpiryReminderEventDto|null $card_expiry_reminder_event card_expiry_reminder_event
     *
     * @return $this
     */
    public function setCardExpiryReminderEvent(?\Shaype\Webhook\Model\CardExpiryReminderEventDto $card_expiry_reminder_event): static
    {
        if (is_null($card_expiry_reminder_event)) {
            throw new InvalidArgumentException('non-nullable card_expiry_reminder_event cannot be null');
        }
        $this->container['card_expiry_reminder_event'] = $card_expiry_reminder_event;

        return $this;
    }

    /**
     * Gets mandate_action_expiration_event
     *
     * @return \Shaype\Webhook\Model\MandateActionExpirationEventDto|null
     */
    public function getMandateActionExpirationEvent(): ?\Shaype\Webhook\Model\MandateActionExpirationEventDto
    {
        return $this->container['mandate_action_expiration_event'];
    }

    /**
     * Sets mandate_action_expiration_event
     *
     * @param \Shaype\Webhook\Model\MandateActionExpirationEventDto|null $mandate_action_expiration_event mandate_action_expiration_event
     *
     * @return $this
     */
    public function setMandateActionExpirationEvent(?\Shaype\Webhook\Model\MandateActionExpirationEventDto $mandate_action_expiration_event): static
    {
        if (is_null($mandate_action_expiration_event)) {
            throw new InvalidArgumentException('non-nullable mandate_action_expiration_event cannot be null');
        }
        $this->container['mandate_action_expiration_event'] = $mandate_action_expiration_event;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


